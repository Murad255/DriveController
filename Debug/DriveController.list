
DriveController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db4  08003db4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003db4  08003db4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003db4  08003db4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db8  08003db8  00013db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  2000000c  08003dc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  08003dc8  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001091d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002753  00000000  00000000  00030951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f58  00000000  00000000  000330a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e30  00000000  00000000  00034000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fced  00000000  00000000  00034e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001479a  00000000  00000000  00044b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00061ac5  00000000  00000000  000592b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bad7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000367c  00000000  00000000  000badcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d64 	.word	0x08003d64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003d64 	.word	0x08003d64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_ui2f>:
 8000220:	b570      	push	{r4, r5, r6, lr}
 8000222:	1e05      	subs	r5, r0, #0
 8000224:	d00e      	beq.n	8000244 <__aeabi_ui2f+0x24>
 8000226:	f000 f83d 	bl	80002a4 <__clzsi2>
 800022a:	239e      	movs	r3, #158	; 0x9e
 800022c:	0004      	movs	r4, r0
 800022e:	1a1b      	subs	r3, r3, r0
 8000230:	2b96      	cmp	r3, #150	; 0x96
 8000232:	dc0c      	bgt.n	800024e <__aeabi_ui2f+0x2e>
 8000234:	2808      	cmp	r0, #8
 8000236:	dd01      	ble.n	800023c <__aeabi_ui2f+0x1c>
 8000238:	3c08      	subs	r4, #8
 800023a:	40a5      	lsls	r5, r4
 800023c:	026d      	lsls	r5, r5, #9
 800023e:	0a6d      	lsrs	r5, r5, #9
 8000240:	b2d8      	uxtb	r0, r3
 8000242:	e001      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000244:	2000      	movs	r0, #0
 8000246:	2500      	movs	r5, #0
 8000248:	05c0      	lsls	r0, r0, #23
 800024a:	4328      	orrs	r0, r5
 800024c:	bd70      	pop	{r4, r5, r6, pc}
 800024e:	2b99      	cmp	r3, #153	; 0x99
 8000250:	dd09      	ble.n	8000266 <__aeabi_ui2f+0x46>
 8000252:	0002      	movs	r2, r0
 8000254:	0029      	movs	r1, r5
 8000256:	321b      	adds	r2, #27
 8000258:	4091      	lsls	r1, r2
 800025a:	1e4a      	subs	r2, r1, #1
 800025c:	4191      	sbcs	r1, r2
 800025e:	2205      	movs	r2, #5
 8000260:	1a12      	subs	r2, r2, r0
 8000262:	40d5      	lsrs	r5, r2
 8000264:	430d      	orrs	r5, r1
 8000266:	2c05      	cmp	r4, #5
 8000268:	dc12      	bgt.n	8000290 <__aeabi_ui2f+0x70>
 800026a:	0029      	movs	r1, r5
 800026c:	4e0c      	ldr	r6, [pc, #48]	; (80002a0 <__aeabi_ui2f+0x80>)
 800026e:	4031      	ands	r1, r6
 8000270:	076a      	lsls	r2, r5, #29
 8000272:	d009      	beq.n	8000288 <__aeabi_ui2f+0x68>
 8000274:	200f      	movs	r0, #15
 8000276:	4028      	ands	r0, r5
 8000278:	2804      	cmp	r0, #4
 800027a:	d005      	beq.n	8000288 <__aeabi_ui2f+0x68>
 800027c:	3104      	adds	r1, #4
 800027e:	014a      	lsls	r2, r1, #5
 8000280:	d502      	bpl.n	8000288 <__aeabi_ui2f+0x68>
 8000282:	239f      	movs	r3, #159	; 0x9f
 8000284:	4031      	ands	r1, r6
 8000286:	1b1b      	subs	r3, r3, r4
 8000288:	0189      	lsls	r1, r1, #6
 800028a:	0a4d      	lsrs	r5, r1, #9
 800028c:	b2d8      	uxtb	r0, r3
 800028e:	e7db      	b.n	8000248 <__aeabi_ui2f+0x28>
 8000290:	1f62      	subs	r2, r4, #5
 8000292:	4095      	lsls	r5, r2
 8000294:	0029      	movs	r1, r5
 8000296:	4e02      	ldr	r6, [pc, #8]	; (80002a0 <__aeabi_ui2f+0x80>)
 8000298:	4031      	ands	r1, r6
 800029a:	076a      	lsls	r2, r5, #29
 800029c:	d0f4      	beq.n	8000288 <__aeabi_ui2f+0x68>
 800029e:	e7e9      	b.n	8000274 <__aeabi_ui2f+0x54>
 80002a0:	fbffffff 	.word	0xfbffffff

080002a4 <__clzsi2>:
 80002a4:	211c      	movs	r1, #28
 80002a6:	2301      	movs	r3, #1
 80002a8:	041b      	lsls	r3, r3, #16
 80002aa:	4298      	cmp	r0, r3
 80002ac:	d301      	bcc.n	80002b2 <__clzsi2+0xe>
 80002ae:	0c00      	lsrs	r0, r0, #16
 80002b0:	3910      	subs	r1, #16
 80002b2:	0a1b      	lsrs	r3, r3, #8
 80002b4:	4298      	cmp	r0, r3
 80002b6:	d301      	bcc.n	80002bc <__clzsi2+0x18>
 80002b8:	0a00      	lsrs	r0, r0, #8
 80002ba:	3908      	subs	r1, #8
 80002bc:	091b      	lsrs	r3, r3, #4
 80002be:	4298      	cmp	r0, r3
 80002c0:	d301      	bcc.n	80002c6 <__clzsi2+0x22>
 80002c2:	0900      	lsrs	r0, r0, #4
 80002c4:	3904      	subs	r1, #4
 80002c6:	a202      	add	r2, pc, #8	; (adr r2, 80002d0 <__clzsi2+0x2c>)
 80002c8:	5c10      	ldrb	r0, [r2, r0]
 80002ca:	1840      	adds	r0, r0, r1
 80002cc:	4770      	bx	lr
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	02020304 	.word	0x02020304
 80002d4:	01010101 	.word	0x01010101
	...

080002e0 <bsp_as5600Init>:
#define _2PI 6.28318530718

static float angle_data_prev; // Last position
static float full_rotation_offset; // number of turns

void bsp_as5600Init(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* init i2c interface */

  /* init var */
  full_rotation_offset = 0;
 80002e4:	4b07      	ldr	r3, [pc, #28]	; (8000304 <bsp_as5600Init+0x24>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
  angle_data_prev = bsp_as5600GetRawAngle();
 80002ea:	f000 f855 	bl	8000398 <bsp_as5600GetRawAngle>
 80002ee:	0003      	movs	r3, r0
 80002f0:	0018      	movs	r0, r3
 80002f2:	f7ff ff95 	bl	8000220 <__aeabi_ui2f>
 80002f6:	1c02      	adds	r2, r0, #0
 80002f8:	4b03      	ldr	r3, [pc, #12]	; (8000308 <bsp_as5600Init+0x28>)
 80002fa:	601a      	str	r2, [r3, #0]
}
 80002fc:	46c0      	nop			; (mov r8, r8)
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}
 8000302:	46c0      	nop			; (mov r8, r8)
 8000304:	2000002c 	.word	0x2000002c
 8000308:	20000028 	.word	0x20000028

0800030c <i2cWrite>:

static int i2cWrite(uint8_t dev_addr, uint8_t *pData, uint32_t count) {
 800030c:	b590      	push	{r4, r7, lr}
 800030e:	b089      	sub	sp, #36	; 0x24
 8000310:	af02      	add	r7, sp, #8
 8000312:	60b9      	str	r1, [r7, #8]
 8000314:	607a      	str	r2, [r7, #4]
 8000316:	210f      	movs	r1, #15
 8000318:	187b      	adds	r3, r7, r1
 800031a:	1c02      	adds	r2, r0, #0
 800031c:	701a      	strb	r2, [r3, #0]
  int status;
  int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	330a      	adds	r3, #10
 8000322:	617b      	str	r3, [r7, #20]

  status = HAL_I2C_Master_Transmit(&AS5600_I2C_HANDLE, dev_addr, pData, count, i2c_time_out);
 8000324:	187b      	adds	r3, r7, r1
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	b299      	uxth	r1, r3
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	b29c      	uxth	r4, r3
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	68ba      	ldr	r2, [r7, #8]
 8000332:	4806      	ldr	r0, [pc, #24]	; (800034c <i2cWrite+0x40>)
 8000334:	9300      	str	r3, [sp, #0]
 8000336:	0023      	movs	r3, r4
 8000338:	f001 f93e 	bl	80015b8 <HAL_I2C_Master_Transmit>
 800033c:	0003      	movs	r3, r0
 800033e:	613b      	str	r3, [r7, #16]
  return status;
 8000340:	693b      	ldr	r3, [r7, #16]
}
 8000342:	0018      	movs	r0, r3
 8000344:	46bd      	mov	sp, r7
 8000346:	b007      	add	sp, #28
 8000348:	bd90      	pop	{r4, r7, pc}
 800034a:	46c0      	nop			; (mov r8, r8)
 800034c:	20000030 	.word	0x20000030

08000350 <i2cRead>:

static int i2cRead(uint8_t dev_addr, uint8_t *pData, uint32_t count) {
 8000350:	b590      	push	{r4, r7, lr}
 8000352:	b089      	sub	sp, #36	; 0x24
 8000354:	af02      	add	r7, sp, #8
 8000356:	60b9      	str	r1, [r7, #8]
 8000358:	607a      	str	r2, [r7, #4]
 800035a:	210f      	movs	r1, #15
 800035c:	187b      	adds	r3, r7, r1
 800035e:	1c02      	adds	r2, r0, #0
 8000360:	701a      	strb	r2, [r3, #0]
  int status;
  int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	330a      	adds	r3, #10
 8000366:	617b      	str	r3, [r7, #20]

  status = HAL_I2C_Master_Receive(&AS5600_I2C_HANDLE, (dev_addr | 1), pData, count, i2c_time_out);
 8000368:	187b      	adds	r3, r7, r1
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2201      	movs	r2, #1
 800036e:	4313      	orrs	r3, r2
 8000370:	b2db      	uxtb	r3, r3
 8000372:	b299      	uxth	r1, r3
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	b29c      	uxth	r4, r3
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	68ba      	ldr	r2, [r7, #8]
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <i2cRead+0x44>)
 800037e:	9300      	str	r3, [sp, #0]
 8000380:	0023      	movs	r3, r4
 8000382:	f001 fa21 	bl	80017c8 <HAL_I2C_Master_Receive>
 8000386:	0003      	movs	r3, r0
 8000388:	613b      	str	r3, [r7, #16]
  return status;
 800038a:	693b      	ldr	r3, [r7, #16]
}
 800038c:	0018      	movs	r0, r3
 800038e:	46bd      	mov	sp, r7
 8000390:	b007      	add	sp, #28
 8000392:	bd90      	pop	{r4, r7, pc}
 8000394:	20000030 	.word	0x20000030

08000398 <bsp_as5600GetRawAngle>:

uint16_t bsp_as5600GetRawAngle(void) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
  uint16_t raw_angle;
  uint8_t buffer[2] = {0};
 800039e:	1d3b      	adds	r3, r7, #4
 80003a0:	2200      	movs	r2, #0
 80003a2:	801a      	strh	r2, [r3, #0]
  uint8_t raw_angle_register = AS5600_RAW_ANGLE_REGISTER;
 80003a4:	1cfb      	adds	r3, r7, #3
 80003a6:	220c      	movs	r2, #12
 80003a8:	701a      	strb	r2, [r3, #0]

  i2cWrite(AS5600_ADDR, &raw_angle_register, 1);
 80003aa:	1cfb      	adds	r3, r7, #3
 80003ac:	2201      	movs	r2, #1
 80003ae:	0019      	movs	r1, r3
 80003b0:	206c      	movs	r0, #108	; 0x6c
 80003b2:	f7ff ffab 	bl	800030c <i2cWrite>
  i2cRead(AS5600_ADDR, buffer, 2);
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2202      	movs	r2, #2
 80003ba:	0019      	movs	r1, r3
 80003bc:	206c      	movs	r0, #108	; 0x6c
 80003be:	f7ff ffc7 	bl	8000350 <i2cRead>
  raw_angle = ((uint16_t)buffer[0] << 8) | (uint16_t)buffer[1];
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	781b      	ldrb	r3, [r3, #0]
 80003c6:	021b      	lsls	r3, r3, #8
 80003c8:	b21a      	sxth	r2, r3
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	785b      	ldrb	r3, [r3, #1]
 80003ce:	b21b      	sxth	r3, r3
 80003d0:	4313      	orrs	r3, r2
 80003d2:	b21a      	sxth	r2, r3
 80003d4:	1dbb      	adds	r3, r7, #6
 80003d6:	801a      	strh	r2, [r3, #0]
  return raw_angle;
 80003d8:	1dbb      	adds	r3, r7, #6
 80003da:	881b      	ldrh	r3, [r3, #0]
}
 80003dc:	0018      	movs	r0, r3
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}

080003e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	b082      	sub	sp, #8
 80003e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003ea:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_DMA_Init+0x38>)
 80003ec:	695a      	ldr	r2, [r3, #20]
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_DMA_Init+0x38>)
 80003f0:	2101      	movs	r1, #1
 80003f2:	430a      	orrs	r2, r1
 80003f4:	615a      	str	r2, [r3, #20]
 80003f6:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_DMA_Init+0x38>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	2201      	movs	r2, #1
 80003fc:	4013      	ands	r3, r2
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000402:	2200      	movs	r2, #0
 8000404:	2100      	movs	r1, #0
 8000406:	200a      	movs	r0, #10
 8000408:	f000 fd60 	bl	8000ecc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800040c:	200a      	movs	r0, #10
 800040e:	f000 fd72 	bl	8000ef6 <HAL_NVIC_EnableIRQ>

}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	46bd      	mov	sp, r7
 8000416:	b002      	add	sp, #8
 8000418:	bd80      	pop	{r7, pc}
 800041a:	46c0      	nop			; (mov r8, r8)
 800041c:	40021000 	.word	0x40021000

08000420 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	0018      	movs	r0, r3
 800042a:	2314      	movs	r3, #20
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f003 fc90 	bl	8003d54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_GPIO_Init+0x6c>)
 8000436:	695a      	ldr	r2, [r3, #20]
 8000438:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_GPIO_Init+0x6c>)
 800043a:	2180      	movs	r1, #128	; 0x80
 800043c:	0289      	lsls	r1, r1, #10
 800043e:	430a      	orrs	r2, r1
 8000440:	615a      	str	r2, [r3, #20]
 8000442:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_GPIO_Init+0x6c>)
 8000444:	695a      	ldr	r2, [r3, #20]
 8000446:	2380      	movs	r3, #128	; 0x80
 8000448:	029b      	lsls	r3, r3, #10
 800044a:	4013      	ands	r3, r2
 800044c:	603b      	str	r3, [r7, #0]
 800044e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000450:	2390      	movs	r3, #144	; 0x90
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	2200      	movs	r2, #0
 8000456:	2130      	movs	r1, #48	; 0x30
 8000458:	0018      	movs	r0, r3
 800045a:	f000 ffdf 	bl	800141c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2230      	movs	r2, #48	; 0x30
 8000462:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2201      	movs	r2, #1
 8000468:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000470:	1d3b      	adds	r3, r7, #4
 8000472:	2200      	movs	r2, #0
 8000474:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	1d3a      	adds	r2, r7, #4
 8000478:	2390      	movs	r3, #144	; 0x90
 800047a:	05db      	lsls	r3, r3, #23
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f000 fe5c 	bl	800113c <HAL_GPIO_Init>

}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b006      	add	sp, #24
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40021000 	.word	0x40021000

08000490 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000494:	4b1b      	ldr	r3, [pc, #108]	; (8000504 <MX_I2C1_Init+0x74>)
 8000496:	4a1c      	ldr	r2, [pc, #112]	; (8000508 <MX_I2C1_Init+0x78>)
 8000498:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 800049a:	4b1a      	ldr	r3, [pc, #104]	; (8000504 <MX_I2C1_Init+0x74>)
 800049c:	4a1b      	ldr	r2, [pc, #108]	; (800050c <MX_I2C1_Init+0x7c>)
 800049e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a0:	4b18      	ldr	r3, [pc, #96]	; (8000504 <MX_I2C1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004a6:	4b17      	ldr	r3, [pc, #92]	; (8000504 <MX_I2C1_Init+0x74>)
 80004a8:	2201      	movs	r2, #1
 80004aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004ac:	4b15      	ldr	r3, [pc, #84]	; (8000504 <MX_I2C1_Init+0x74>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004b2:	4b14      	ldr	r3, [pc, #80]	; (8000504 <MX_I2C1_Init+0x74>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004b8:	4b12      	ldr	r3, [pc, #72]	; (8000504 <MX_I2C1_Init+0x74>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <MX_I2C1_Init+0x74>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c4:	4b0f      	ldr	r3, [pc, #60]	; (8000504 <MX_I2C1_Init+0x74>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <MX_I2C1_Init+0x74>)
 80004cc:	0018      	movs	r0, r3
 80004ce:	f000 ffdd 	bl	800148c <HAL_I2C_Init>
 80004d2:	1e03      	subs	r3, r0, #0
 80004d4:	d001      	beq.n	80004da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004d6:	f000 f93c 	bl	8000752 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004da:	4b0a      	ldr	r3, [pc, #40]	; (8000504 <MX_I2C1_Init+0x74>)
 80004dc:	2100      	movs	r1, #0
 80004de:	0018      	movs	r0, r3
 80004e0:	f001 fd30 	bl	8001f44 <HAL_I2CEx_ConfigAnalogFilter>
 80004e4:	1e03      	subs	r3, r0, #0
 80004e6:	d001      	beq.n	80004ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004e8:	f000 f933 	bl	8000752 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004ec:	4b05      	ldr	r3, [pc, #20]	; (8000504 <MX_I2C1_Init+0x74>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 fd73 	bl	8001fdc <HAL_I2CEx_ConfigDigitalFilter>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004fa:	f000 f92a 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	20000030 	.word	0x20000030
 8000508:	40005400 	.word	0x40005400
 800050c:	2010091a 	.word	0x2010091a

08000510 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000510:	b590      	push	{r4, r7, lr}
 8000512:	b08b      	sub	sp, #44	; 0x2c
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	2414      	movs	r4, #20
 800051a:	193b      	adds	r3, r7, r4
 800051c:	0018      	movs	r0, r3
 800051e:	2314      	movs	r3, #20
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	f003 fc16 	bl	8003d54 <memset>
  if(i2cHandle->Instance==I2C1)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a30      	ldr	r2, [pc, #192]	; (80005f0 <HAL_I2C_MspInit+0xe0>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d159      	bne.n	80005e6 <HAL_I2C_MspInit+0xd6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000532:	4b30      	ldr	r3, [pc, #192]	; (80005f4 <HAL_I2C_MspInit+0xe4>)
 8000534:	695a      	ldr	r2, [r3, #20]
 8000536:	4b2f      	ldr	r3, [pc, #188]	; (80005f4 <HAL_I2C_MspInit+0xe4>)
 8000538:	2180      	movs	r1, #128	; 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <HAL_I2C_MspInit+0xe4>)
 8000542:	695a      	ldr	r2, [r3, #20]
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800054e:	193b      	adds	r3, r7, r4
 8000550:	22c0      	movs	r2, #192	; 0xc0
 8000552:	00d2      	lsls	r2, r2, #3
 8000554:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000556:	0021      	movs	r1, r4
 8000558:	187b      	adds	r3, r7, r1
 800055a:	2212      	movs	r2, #18
 800055c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2203      	movs	r2, #3
 8000568:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800056a:	187b      	adds	r3, r7, r1
 800056c:	2204      	movs	r2, #4
 800056e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000570:	187a      	adds	r2, r7, r1
 8000572:	2390      	movs	r3, #144	; 0x90
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	0011      	movs	r1, r2
 8000578:	0018      	movs	r0, r3
 800057a:	f000 fddf 	bl	800113c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <HAL_I2C_MspInit+0xe4>)
 8000580:	69da      	ldr	r2, [r3, #28]
 8000582:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <HAL_I2C_MspInit+0xe4>)
 8000584:	2180      	movs	r1, #128	; 0x80
 8000586:	0389      	lsls	r1, r1, #14
 8000588:	430a      	orrs	r2, r1
 800058a:	61da      	str	r2, [r3, #28]
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <HAL_I2C_MspInit+0xe4>)
 800058e:	69da      	ldr	r2, [r3, #28]
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	039b      	lsls	r3, r3, #14
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800059a:	4b17      	ldr	r3, [pc, #92]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <HAL_I2C_MspInit+0xec>)
 800059e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005a0:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80005a6:	4b14      	ldr	r3, [pc, #80]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005ac:	4b12      	ldr	r3, [pc, #72]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005b2:	4b11      	ldr	r3, [pc, #68]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005b8:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80005be:	4b0e      	ldr	r3, [pc, #56]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80005ca:	4b0b      	ldr	r3, [pc, #44]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 fcaf 	bl	8000f30 <HAL_DMA_Init>
 80005d2:	1e03      	subs	r3, r0, #0
 80005d4:	d001      	beq.n	80005da <HAL_I2C_MspInit+0xca>
    {
      Error_Handler();
 80005d6:	f000 f8bc 	bl	8000752 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005de:	63da      	str	r2, [r3, #60]	; 0x3c
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <HAL_I2C_MspInit+0xe8>)
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80005e6:	46c0      	nop			; (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b00b      	add	sp, #44	; 0x2c
 80005ec:	bd90      	pop	{r4, r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	40005400 	.word	0x40005400
 80005f4:	40021000 	.word	0x40021000
 80005f8:	20000084 	.word	0x20000084
 80005fc:	40020030 	.word	0x40020030

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b083      	sub	sp, #12
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fb2d 	bl	8000c64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f83e 	bl	800068a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f7ff ff07 	bl	8000420 <MX_GPIO_Init>
  MX_DMA_Init();
 8000612:	f7ff fee7 	bl	80003e4 <MX_DMA_Init>
  MX_I2C1_Init();
 8000616:	f7ff ff3b 	bl	8000490 <MX_I2C1_Init>
  MX_TIM1_Init();
 800061a:	f000 f8ed 	bl	80007f8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800061e:	f000 fa7b 	bl	8000b18 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000622:	f000 f941 	bl	80008a8 <MX_TIM3_Init>
  MX_TIM14_Init();
 8000626:	f000 f9c9 	bl	80009bc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800062a:	2390      	movs	r3, #144	; 0x90
 800062c:	05db      	lsls	r3, r3, #23
 800062e:	2201      	movs	r2, #1
 8000630:	2110      	movs	r1, #16
 8000632:	0018      	movs	r0, r3
 8000634:	f000 fef2 	bl	800141c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000638:	2390      	movs	r3, #144	; 0x90
 800063a:	05db      	lsls	r3, r3, #23
 800063c:	2201      	movs	r2, #1
 800063e:	2120      	movs	r1, #32
 8000640:	0018      	movs	r0, r3
 8000642:	f000 feeb 	bl	800141c <HAL_GPIO_WritePin>
  bsp_as5600Init();
 8000646:	f7ff fe4b 	bl	80002e0 <bsp_as5600Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint16_t  angle_raw = bsp_as5600GetRawAngle();
 800064a:	1dbc      	adds	r4, r7, #6
 800064c:	f7ff fea4 	bl	8000398 <bsp_as5600GetRawAngle>
 8000650:	0003      	movs	r3, r0
 8000652:	8023      	strh	r3, [r4, #0]
	  //current = INA219_ReadCurrent(&ina219);

	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,angle_raw<1000);
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	881a      	ldrh	r2, [r3, #0]
 8000658:	23fa      	movs	r3, #250	; 0xfa
 800065a:	009b      	lsls	r3, r3, #2
 800065c:	429a      	cmp	r2, r3
 800065e:	419b      	sbcs	r3, r3
 8000660:	425b      	negs	r3, r3
 8000662:	b2db      	uxtb	r3, r3
 8000664:	001a      	movs	r2, r3
 8000666:	2390      	movs	r3, #144	; 0x90
 8000668:	05db      	lsls	r3, r3, #23
 800066a:	2120      	movs	r1, #32
 800066c:	0018      	movs	r0, r3
 800066e:	f000 fed5 	bl	800141c <HAL_GPIO_WritePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000672:	2390      	movs	r3, #144	; 0x90
 8000674:	05db      	lsls	r3, r3, #23
 8000676:	2110      	movs	r1, #16
 8000678:	0018      	movs	r0, r3
 800067a:	f000 feec 	bl	8001456 <HAL_GPIO_TogglePin>

	 // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
	  HAL_Delay(1000);
 800067e:	23fa      	movs	r3, #250	; 0xfa
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fb52 	bl	8000d2c <HAL_Delay>
  {
 8000688:	e7df      	b.n	800064a <main+0x4a>

0800068a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068a:	b590      	push	{r4, r7, lr}
 800068c:	b095      	sub	sp, #84	; 0x54
 800068e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000690:	2420      	movs	r4, #32
 8000692:	193b      	adds	r3, r7, r4
 8000694:	0018      	movs	r0, r3
 8000696:	2330      	movs	r3, #48	; 0x30
 8000698:	001a      	movs	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	f003 fb5a 	bl	8003d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	2310      	movs	r3, #16
 80006a2:	18fb      	adds	r3, r7, r3
 80006a4:	0018      	movs	r0, r3
 80006a6:	2310      	movs	r3, #16
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f003 fb52 	bl	8003d54 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006b0:	003b      	movs	r3, r7
 80006b2:	0018      	movs	r0, r3
 80006b4:	2310      	movs	r3, #16
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f003 fb4b 	bl	8003d54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006be:	0021      	movs	r1, r4
 80006c0:	187b      	adds	r3, r7, r1
 80006c2:	2202      	movs	r2, #2
 80006c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c6:	187b      	adds	r3, r7, r1
 80006c8:	2201      	movs	r2, #1
 80006ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	187b      	adds	r3, r7, r1
 80006ce:	2210      	movs	r2, #16
 80006d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	187b      	adds	r3, r7, r1
 80006d4:	2202      	movs	r2, #2
 80006d6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d8:	187b      	adds	r3, r7, r1
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	22a0      	movs	r2, #160	; 0xa0
 80006e2:	0392      	lsls	r2, r2, #14
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	0018      	movs	r0, r3
 80006f0:	f001 fcc0 	bl	8002074 <HAL_RCC_OscConfig>
 80006f4:	1e03      	subs	r3, r0, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006f8:	f000 f82b 	bl	8000752 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	2110      	movs	r1, #16
 80006fe:	187b      	adds	r3, r7, r1
 8000700:	2207      	movs	r2, #7
 8000702:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2202      	movs	r2, #2
 8000708:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000710:	187b      	adds	r3, r7, r1
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2101      	movs	r1, #1
 800071a:	0018      	movs	r0, r3
 800071c:	f001 ffc4 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000724:	f000 f815 	bl	8000752 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000728:	003b      	movs	r3, r7
 800072a:	2221      	movs	r2, #33	; 0x21
 800072c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800072e:	003b      	movs	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 8000734:	003b      	movs	r3, r7
 8000736:	2210      	movs	r2, #16
 8000738:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800073a:	003b      	movs	r3, r7
 800073c:	0018      	movs	r0, r3
 800073e:	f002 f8f7 	bl	8002930 <HAL_RCCEx_PeriphCLKConfig>
 8000742:	1e03      	subs	r3, r0, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000746:	f000 f804 	bl	8000752 <Error_Handler>
  }
}
 800074a:	46c0      	nop			; (mov r8, r8)
 800074c:	46bd      	mov	sp, r7
 800074e:	b015      	add	sp, #84	; 0x54
 8000750:	bd90      	pop	{r4, r7, pc}

08000752 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000756:	b672      	cpsid	i
}
 8000758:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075a:	e7fe      	b.n	800075a <Error_Handler+0x8>

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000762:	4b0f      	ldr	r3, [pc, #60]	; (80007a0 <HAL_MspInit+0x44>)
 8000764:	699a      	ldr	r2, [r3, #24]
 8000766:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_MspInit+0x44>)
 8000768:	2101      	movs	r1, #1
 800076a:	430a      	orrs	r2, r1
 800076c:	619a      	str	r2, [r3, #24]
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <HAL_MspInit+0x44>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	2201      	movs	r2, #1
 8000774:	4013      	ands	r3, r2
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b09      	ldr	r3, [pc, #36]	; (80007a0 <HAL_MspInit+0x44>)
 800077c:	69da      	ldr	r2, [r3, #28]
 800077e:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_MspInit+0x44>)
 8000780:	2180      	movs	r1, #128	; 0x80
 8000782:	0549      	lsls	r1, r1, #21
 8000784:	430a      	orrs	r2, r1
 8000786:	61da      	str	r2, [r3, #28]
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_MspInit+0x44>)
 800078a:	69da      	ldr	r2, [r3, #28]
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	055b      	lsls	r3, r3, #21
 8000790:	4013      	ands	r3, r2
 8000792:	603b      	str	r3, [r7, #0]
 8000794:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	46bd      	mov	sp, r7
 800079a:	b002      	add	sp, #8
 800079c:	bd80      	pop	{r7, pc}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c8:	f000 fa94 	bl	8000cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <DMA1_Channel2_3_IRQHandler+0x14>)
 80007da:	0018      	movs	r0, r3
 80007dc:	f000 fbf0 	bl	8000fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80007e0:	46c0      	nop			; (mov r8, r8)
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	20000084 	.word	0x20000084

080007ec <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80007f0:	46c0      	nop			; (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
	...

080007f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007fe:	2308      	movs	r3, #8
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2310      	movs	r3, #16
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f003 faa3 	bl	8003d54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	2308      	movs	r3, #8
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f003 fa9c 	bl	8003d54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800081c:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_TIM1_Init+0xa4>)
 800081e:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <MX_TIM1_Init+0xa8>)
 8000820:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000822:	4b1e      	ldr	r3, [pc, #120]	; (800089c <MX_TIM1_Init+0xa4>)
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_TIM1_Init+0xa4>)
 800082a:	2200      	movs	r2, #0
 800082c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <MX_TIM1_Init+0xa4>)
 8000830:	4a1c      	ldr	r2, [pc, #112]	; (80008a4 <MX_TIM1_Init+0xac>)
 8000832:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000834:	4b19      	ldr	r3, [pc, #100]	; (800089c <MX_TIM1_Init+0xa4>)
 8000836:	2200      	movs	r2, #0
 8000838:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_TIM1_Init+0xa4>)
 800083c:	2200      	movs	r2, #0
 800083e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <MX_TIM1_Init+0xa4>)
 8000842:	2200      	movs	r2, #0
 8000844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_TIM1_Init+0xa4>)
 8000848:	0018      	movs	r0, r3
 800084a:	f002 f93f 	bl	8002acc <HAL_TIM_Base_Init>
 800084e:	1e03      	subs	r3, r0, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000852:	f7ff ff7e 	bl	8000752 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000856:	2108      	movs	r1, #8
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2280      	movs	r2, #128	; 0x80
 800085c:	0152      	lsls	r2, r2, #5
 800085e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000860:	187a      	adds	r2, r7, r1
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_TIM1_Init+0xa4>)
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f002 fa9e 	bl	8002da8 <HAL_TIM_ConfigClockSource>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000870:	f7ff ff6f 	bl	8000752 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000874:	003b      	movs	r3, r7
 8000876:	2200      	movs	r2, #0
 8000878:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800087a:	003b      	movs	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000880:	003a      	movs	r2, r7
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_TIM1_Init+0xa4>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f002 fe48 	bl	800351c <HAL_TIMEx_MasterConfigSynchronization>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000890:	f7ff ff5f 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	46bd      	mov	sp, r7
 8000898:	b006      	add	sp, #24
 800089a:	bd80      	pop	{r7, pc}
 800089c:	200000c8 	.word	0x200000c8
 80008a0:	40012c00 	.word	0x40012c00
 80008a4:	0000ffff 	.word	0x0000ffff

080008a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08e      	sub	sp, #56	; 0x38
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	2328      	movs	r3, #40	; 0x28
 80008b0:	18fb      	adds	r3, r7, r3
 80008b2:	0018      	movs	r0, r3
 80008b4:	2310      	movs	r3, #16
 80008b6:	001a      	movs	r2, r3
 80008b8:	2100      	movs	r1, #0
 80008ba:	f003 fa4b 	bl	8003d54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008be:	2320      	movs	r3, #32
 80008c0:	18fb      	adds	r3, r7, r3
 80008c2:	0018      	movs	r0, r3
 80008c4:	2308      	movs	r3, #8
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f003 fa43 	bl	8003d54 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	0018      	movs	r0, r3
 80008d2:	231c      	movs	r3, #28
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f003 fa3c 	bl	8003d54 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008dc:	4b34      	ldr	r3, [pc, #208]	; (80009b0 <MX_TIM3_Init+0x108>)
 80008de:	4a35      	ldr	r2, [pc, #212]	; (80009b4 <MX_TIM3_Init+0x10c>)
 80008e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008e2:	4b33      	ldr	r3, [pc, #204]	; (80009b0 <MX_TIM3_Init+0x108>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e8:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <MX_TIM3_Init+0x108>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ee:	4b30      	ldr	r3, [pc, #192]	; (80009b0 <MX_TIM3_Init+0x108>)
 80008f0:	4a31      	ldr	r2, [pc, #196]	; (80009b8 <MX_TIM3_Init+0x110>)
 80008f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f4:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_TIM3_Init+0x108>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b2d      	ldr	r3, [pc, #180]	; (80009b0 <MX_TIM3_Init+0x108>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000900:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_TIM3_Init+0x108>)
 8000902:	0018      	movs	r0, r3
 8000904:	f002 f8e2 	bl	8002acc <HAL_TIM_Base_Init>
 8000908:	1e03      	subs	r3, r0, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800090c:	f7ff ff21 	bl	8000752 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	2128      	movs	r1, #40	; 0x28
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	0152      	lsls	r2, r2, #5
 8000918:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800091a:	187a      	adds	r2, r7, r1
 800091c:	4b24      	ldr	r3, [pc, #144]	; (80009b0 <MX_TIM3_Init+0x108>)
 800091e:	0011      	movs	r1, r2
 8000920:	0018      	movs	r0, r3
 8000922:	f002 fa41 	bl	8002da8 <HAL_TIM_ConfigClockSource>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800092a:	f7ff ff12 	bl	8000752 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_TIM3_Init+0x108>)
 8000930:	0018      	movs	r0, r3
 8000932:	f002 f91b 	bl	8002b6c <HAL_TIM_PWM_Init>
 8000936:	1e03      	subs	r3, r0, #0
 8000938:	d001      	beq.n	800093e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800093a:	f7ff ff0a 	bl	8000752 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800093e:	2120      	movs	r1, #32
 8000940:	187b      	adds	r3, r7, r1
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000946:	187b      	adds	r3, r7, r1
 8000948:	2200      	movs	r2, #0
 800094a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800094c:	187a      	adds	r2, r7, r1
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_TIM3_Init+0x108>)
 8000950:	0011      	movs	r1, r2
 8000952:	0018      	movs	r0, r3
 8000954:	f002 fde2 	bl	800351c <HAL_TIMEx_MasterConfigSynchronization>
 8000958:	1e03      	subs	r3, r0, #0
 800095a:	d001      	beq.n	8000960 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800095c:	f7ff fef9 	bl	8000752 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2260      	movs	r2, #96	; 0x60
 8000964:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000972:	1d3b      	adds	r3, r7, #4
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000978:	1d39      	adds	r1, r7, #4
 800097a:	4b0d      	ldr	r3, [pc, #52]	; (80009b0 <MX_TIM3_Init+0x108>)
 800097c:	2200      	movs	r2, #0
 800097e:	0018      	movs	r0, r3
 8000980:	f002 f94c 	bl	8002c1c <HAL_TIM_PWM_ConfigChannel>
 8000984:	1e03      	subs	r3, r0, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000988:	f7ff fee3 	bl	8000752 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800098c:	1d39      	adds	r1, r7, #4
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <MX_TIM3_Init+0x108>)
 8000990:	2204      	movs	r2, #4
 8000992:	0018      	movs	r0, r3
 8000994:	f002 f942 	bl	8002c1c <HAL_TIM_PWM_ConfigChannel>
 8000998:	1e03      	subs	r3, r0, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 800099c:	f7ff fed9 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <MX_TIM3_Init+0x108>)
 80009a2:	0018      	movs	r0, r3
 80009a4:	f000 f87a 	bl	8000a9c <HAL_TIM_MspPostInit>

}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b00e      	add	sp, #56	; 0x38
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000110 	.word	0x20000110
 80009b4:	40000400 	.word	0x40000400
 80009b8:	0000ffff 	.word	0x0000ffff

080009bc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009c0:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <MX_TIM14_Init+0x40>)
 80009c2:	4a0f      	ldr	r2, [pc, #60]	; (8000a00 <MX_TIM14_Init+0x44>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <MX_TIM14_Init+0x40>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <MX_TIM14_Init+0x40>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <MX_TIM14_Init+0x40>)
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <MX_TIM14_Init+0x48>)
 80009d6:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b08      	ldr	r3, [pc, #32]	; (80009fc <MX_TIM14_Init+0x40>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b07      	ldr	r3, [pc, #28]	; (80009fc <MX_TIM14_Init+0x40>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <MX_TIM14_Init+0x40>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f002 f870 	bl	8002acc <HAL_TIM_Base_Init>
 80009ec:	1e03      	subs	r3, r0, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80009f0:	f7ff feaf 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009f4:	46c0      	nop			; (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	46c0      	nop			; (mov r8, r8)
 80009fc:	20000158 	.word	0x20000158
 8000a00:	40002000 	.word	0x40002000
 8000a04:	0000ffff 	.word	0x0000ffff

08000a08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1d      	ldr	r2, [pc, #116]	; (8000a8c <HAL_TIM_Base_MspInit+0x84>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d10e      	bne.n	8000a38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a1c:	699a      	ldr	r2, [r3, #24]
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0109      	lsls	r1, r1, #4
 8000a24:	430a      	orrs	r2, r1
 8000a26:	619a      	str	r2, [r3, #24]
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	4013      	ands	r3, r2
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8000a36:	e024      	b.n	8000a82 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM3)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a15      	ldr	r2, [pc, #84]	; (8000a94 <HAL_TIM_Base_MspInit+0x8c>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d10c      	bne.n	8000a5c <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a42:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a44:	69da      	ldr	r2, [r3, #28]
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a48:	2102      	movs	r1, #2
 8000a4a:	430a      	orrs	r2, r1
 8000a4c:	61da      	str	r2, [r3, #28]
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a50:	69db      	ldr	r3, [r3, #28]
 8000a52:	2202      	movs	r2, #2
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
}
 8000a5a:	e012      	b.n	8000a82 <HAL_TIM_Base_MspInit+0x7a>
  else if(tim_baseHandle->Instance==TIM14)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <HAL_TIM_Base_MspInit+0x90>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d10d      	bne.n	8000a82 <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a68:	69da      	ldr	r2, [r3, #28]
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a6c:	2180      	movs	r1, #128	; 0x80
 8000a6e:	0049      	lsls	r1, r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	61da      	str	r2, [r3, #28]
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_TIM_Base_MspInit+0x88>)
 8000a76:	69da      	ldr	r2, [r3, #28]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
}
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b006      	add	sp, #24
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	40012c00 	.word	0x40012c00
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40000400 	.word	0x40000400
 8000a98:	40002000 	.word	0x40002000

08000a9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	240c      	movs	r4, #12
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f003 f950 	bl	8003d54 <memset>
  if(timHandle->Instance==TIM3)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a15      	ldr	r2, [pc, #84]	; (8000b10 <HAL_TIM_MspPostInit+0x74>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d124      	bne.n	8000b08 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_TIM_MspPostInit+0x78>)
 8000ac0:	695a      	ldr	r2, [r3, #20]
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <HAL_TIM_MspPostInit+0x78>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0289      	lsls	r1, r1, #10
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	615a      	str	r2, [r3, #20]
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <HAL_TIM_MspPostInit+0x78>)
 8000ace:	695a      	ldr	r2, [r3, #20]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	029b      	lsls	r3, r3, #10
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ada:	0021      	movs	r1, r4
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	22c0      	movs	r2, #192	; 0xc0
 8000ae0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2202      	movs	r2, #2
 8000ae6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	187b      	adds	r3, r7, r1
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	187b      	adds	r3, r7, r1
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000af4:	187b      	adds	r3, r7, r1
 8000af6:	2201      	movs	r2, #1
 8000af8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	187a      	adds	r2, r7, r1
 8000afc:	2390      	movs	r3, #144	; 0x90
 8000afe:	05db      	lsls	r3, r3, #23
 8000b00:	0011      	movs	r1, r2
 8000b02:	0018      	movs	r0, r3
 8000b04:	f000 fb1a 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	b009      	add	sp, #36	; 0x24
 8000b0e:	bd90      	pop	{r4, r7, pc}
 8000b10:	40000400 	.word	0x40000400
 8000b14:	40021000 	.word	0x40021000

08000b18 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b1e:	4a15      	ldr	r2, [pc, #84]	; (8000b74 <MX_USART1_UART_Init+0x5c>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000b22:	4b13      	ldr	r3, [pc, #76]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b24:	2296      	movs	r2, #150	; 0x96
 8000b26:	0212      	lsls	r2, r2, #8
 8000b28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b4e:	4b08      	ldr	r3, [pc, #32]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b54:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b5a:	4b05      	ldr	r3, [pc, #20]	; (8000b70 <MX_USART1_UART_Init+0x58>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f002 fd2f 	bl	80035c0 <HAL_UART_Init>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b66:	f7ff fdf4 	bl	8000752 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200001a0 	.word	0x200001a0
 8000b74:	40013800 	.word	0x40013800

08000b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b08b      	sub	sp, #44	; 0x2c
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	2414      	movs	r4, #20
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f003 f8e2 	bl	8003d54 <memset>
  if(uartHandle->Instance==USART1)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a1c      	ldr	r2, [pc, #112]	; (8000c08 <HAL_UART_MspInit+0x90>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d132      	bne.n	8000c00 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	; (8000c0c <HAL_UART_MspInit+0x94>)
 8000b9c:	699a      	ldr	r2, [r3, #24]
 8000b9e:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <HAL_UART_MspInit+0x94>)
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	01c9      	lsls	r1, r1, #7
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	619a      	str	r2, [r3, #24]
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0x94>)
 8000baa:	699a      	ldr	r2, [r3, #24]
 8000bac:	2380      	movs	r3, #128	; 0x80
 8000bae:	01db      	lsls	r3, r3, #7
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	613b      	str	r3, [r7, #16]
 8000bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_UART_MspInit+0x94>)
 8000bb8:	695a      	ldr	r2, [r3, #20]
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_UART_MspInit+0x94>)
 8000bbc:	2180      	movs	r1, #128	; 0x80
 8000bbe:	0289      	lsls	r1, r1, #10
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	615a      	str	r2, [r3, #20]
 8000bc4:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <HAL_UART_MspInit+0x94>)
 8000bc6:	695a      	ldr	r2, [r3, #20]
 8000bc8:	2380      	movs	r3, #128	; 0x80
 8000bca:	029b      	lsls	r3, r3, #10
 8000bcc:	4013      	ands	r3, r2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000bd2:	0021      	movs	r1, r4
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	187b      	adds	r3, r7, r1
 8000bdc:	2202      	movs	r2, #2
 8000bde:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	2200      	movs	r2, #0
 8000be4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2203      	movs	r2, #3
 8000bea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2201      	movs	r2, #1
 8000bf0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	187a      	adds	r2, r7, r1
 8000bf4:	2390      	movs	r3, #144	; 0x90
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fa9e 	bl	800113c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b00b      	add	sp, #44	; 0x2c
 8000c06:	bd90      	pop	{r4, r7, pc}
 8000c08:	40013800 	.word	0x40013800
 8000c0c:	40021000 	.word	0x40021000

08000c10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c12:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c14:	f7ff fdea 	bl	80007ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c18:	480c      	ldr	r0, [pc, #48]	; (8000c4c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c1a:	490d      	ldr	r1, [pc, #52]	; (8000c50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c1c:	4a0d      	ldr	r2, [pc, #52]	; (8000c54 <LoopForever+0xe>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c20:	e002      	b.n	8000c28 <LoopCopyDataInit>

08000c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c26:	3304      	adds	r3, #4

08000c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c2c:	d3f9      	bcc.n	8000c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2e:	4a0a      	ldr	r2, [pc, #40]	; (8000c58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c30:	4c0a      	ldr	r4, [pc, #40]	; (8000c5c <LoopForever+0x16>)
  movs r3, #0
 8000c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c34:	e001      	b.n	8000c3a <LoopFillZerobss>

08000c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c38:	3204      	adds	r2, #4

08000c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c3c:	d3fb      	bcc.n	8000c36 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3e:	f003 f865 	bl	8003d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c42:	f7ff fcdd 	bl	8000600 <main>

08000c46 <LoopForever>:

LoopForever:
    b LoopForever
 8000c46:	e7fe      	b.n	8000c46 <LoopForever>
  ldr   r0, =_estack
 8000c48:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c54:	08003dbc 	.word	0x08003dbc
  ldr r2, =_sbss
 8000c58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c5c:	2000022c 	.word	0x2000022c

08000c60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c60:	e7fe      	b.n	8000c60 <ADC1_IRQHandler>
	...

08000c64 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_Init+0x24>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_Init+0x24>)
 8000c6e:	2110      	movs	r1, #16
 8000c70:	430a      	orrs	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000c74:	2003      	movs	r0, #3
 8000c76:	f000 f809 	bl	8000c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c7a:	f7ff fd6f 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
}
 8000c80:	0018      	movs	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	40022000 	.word	0x40022000

08000c8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <HAL_InitTick+0x5c>)
 8000c96:	681c      	ldr	r4, [r3, #0]
 8000c98:	4b14      	ldr	r3, [pc, #80]	; (8000cec <HAL_InitTick+0x60>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	0019      	movs	r1, r3
 8000c9e:	23fa      	movs	r3, #250	; 0xfa
 8000ca0:	0098      	lsls	r0, r3, #2
 8000ca2:	f7ff fa31 	bl	8000108 <__udivsi3>
 8000ca6:	0003      	movs	r3, r0
 8000ca8:	0019      	movs	r1, r3
 8000caa:	0020      	movs	r0, r4
 8000cac:	f7ff fa2c 	bl	8000108 <__udivsi3>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f000 f92f 	bl	8000f16 <HAL_SYSTICK_Config>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000cbc:	2301      	movs	r3, #1
 8000cbe:	e00f      	b.n	8000ce0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d80b      	bhi.n	8000cde <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cc6:	6879      	ldr	r1, [r7, #4]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	425b      	negs	r3, r3
 8000ccc:	2200      	movs	r2, #0
 8000cce:	0018      	movs	r0, r3
 8000cd0:	f000 f8fc 	bl	8000ecc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <HAL_InitTick+0x64>)
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	e000      	b.n	8000ce0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b003      	add	sp, #12
 8000ce6:	bd90      	pop	{r4, r7, pc}
 8000ce8:	20000000 	.word	0x20000000
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000004 	.word	0x20000004

08000cf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <HAL_IncTick+0x1c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	001a      	movs	r2, r3
 8000cfe:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <HAL_IncTick+0x20>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	18d2      	adds	r2, r2, r3
 8000d04:	4b03      	ldr	r3, [pc, #12]	; (8000d14 <HAL_IncTick+0x20>)
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000228 	.word	0x20000228

08000d18 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d1c:	4b02      	ldr	r3, [pc, #8]	; (8000d28 <HAL_GetTick+0x10>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
}
 8000d20:	0018      	movs	r0, r3
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	20000228 	.word	0x20000228

08000d2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d34:	f7ff fff0 	bl	8000d18 <HAL_GetTick>
 8000d38:	0003      	movs	r3, r0
 8000d3a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_Delay+0x44>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	189b      	adds	r3, r3, r2
 8000d50:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	f7ff ffe0 	bl	8000d18 <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8f7      	bhi.n	8000d54 <HAL_Delay+0x28>
  {
  }
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b004      	add	sp, #16
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	20000008 	.word	0x20000008

08000d74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	0002      	movs	r2, r0
 8000d7c:	1dfb      	adds	r3, r7, #7
 8000d7e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	1dfb      	adds	r3, r7, #7
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	2b7f      	cmp	r3, #127	; 0x7f
 8000d86:	d809      	bhi.n	8000d9c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d88:	1dfb      	adds	r3, r7, #7
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	231f      	movs	r3, #31
 8000d90:	401a      	ands	r2, r3
 8000d92:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_EnableIRQ+0x30>)
 8000d94:	2101      	movs	r1, #1
 8000d96:	4091      	lsls	r1, r2
 8000d98:	000a      	movs	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]
  }
}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	0002      	movs	r2, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000db6:	1dfb      	adds	r3, r7, #7
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2b7f      	cmp	r3, #127	; 0x7f
 8000dbc:	d828      	bhi.n	8000e10 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dbe:	4a2f      	ldr	r2, [pc, #188]	; (8000e7c <__NVIC_SetPriority+0xd4>)
 8000dc0:	1dfb      	adds	r3, r7, #7
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b25b      	sxtb	r3, r3
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	33c0      	adds	r3, #192	; 0xc0
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	589b      	ldr	r3, [r3, r2]
 8000dce:	1dfa      	adds	r2, r7, #7
 8000dd0:	7812      	ldrb	r2, [r2, #0]
 8000dd2:	0011      	movs	r1, r2
 8000dd4:	2203      	movs	r2, #3
 8000dd6:	400a      	ands	r2, r1
 8000dd8:	00d2      	lsls	r2, r2, #3
 8000dda:	21ff      	movs	r1, #255	; 0xff
 8000ddc:	4091      	lsls	r1, r2
 8000dde:	000a      	movs	r2, r1
 8000de0:	43d2      	mvns	r2, r2
 8000de2:	401a      	ands	r2, r3
 8000de4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	019b      	lsls	r3, r3, #6
 8000dea:	22ff      	movs	r2, #255	; 0xff
 8000dec:	401a      	ands	r2, r3
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	0018      	movs	r0, r3
 8000df4:	2303      	movs	r3, #3
 8000df6:	4003      	ands	r3, r0
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfc:	481f      	ldr	r0, [pc, #124]	; (8000e7c <__NVIC_SetPriority+0xd4>)
 8000dfe:	1dfb      	adds	r3, r7, #7
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	089b      	lsrs	r3, r3, #2
 8000e06:	430a      	orrs	r2, r1
 8000e08:	33c0      	adds	r3, #192	; 0xc0
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e0e:	e031      	b.n	8000e74 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e10:	4a1b      	ldr	r2, [pc, #108]	; (8000e80 <__NVIC_SetPriority+0xd8>)
 8000e12:	1dfb      	adds	r3, r7, #7
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	0019      	movs	r1, r3
 8000e18:	230f      	movs	r3, #15
 8000e1a:	400b      	ands	r3, r1
 8000e1c:	3b08      	subs	r3, #8
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3306      	adds	r3, #6
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	18d3      	adds	r3, r2, r3
 8000e26:	3304      	adds	r3, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	1dfa      	adds	r2, r7, #7
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	0011      	movs	r1, r2
 8000e30:	2203      	movs	r2, #3
 8000e32:	400a      	ands	r2, r1
 8000e34:	00d2      	lsls	r2, r2, #3
 8000e36:	21ff      	movs	r1, #255	; 0xff
 8000e38:	4091      	lsls	r1, r2
 8000e3a:	000a      	movs	r2, r1
 8000e3c:	43d2      	mvns	r2, r2
 8000e3e:	401a      	ands	r2, r3
 8000e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	019b      	lsls	r3, r3, #6
 8000e46:	22ff      	movs	r2, #255	; 0xff
 8000e48:	401a      	ands	r2, r3
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	0018      	movs	r0, r3
 8000e50:	2303      	movs	r3, #3
 8000e52:	4003      	ands	r3, r0
 8000e54:	00db      	lsls	r3, r3, #3
 8000e56:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e58:	4809      	ldr	r0, [pc, #36]	; (8000e80 <__NVIC_SetPriority+0xd8>)
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	001c      	movs	r4, r3
 8000e60:	230f      	movs	r3, #15
 8000e62:	4023      	ands	r3, r4
 8000e64:	3b08      	subs	r3, #8
 8000e66:	089b      	lsrs	r3, r3, #2
 8000e68:	430a      	orrs	r2, r1
 8000e6a:	3306      	adds	r3, #6
 8000e6c:	009b      	lsls	r3, r3, #2
 8000e6e:	18c3      	adds	r3, r0, r3
 8000e70:	3304      	adds	r3, #4
 8000e72:	601a      	str	r2, [r3, #0]
}
 8000e74:	46c0      	nop			; (mov r8, r8)
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b003      	add	sp, #12
 8000e7a:	bd90      	pop	{r4, r7, pc}
 8000e7c:	e000e100 	.word	0xe000e100
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	045b      	lsls	r3, r3, #17
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d301      	bcc.n	8000e9c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e98:	2301      	movs	r3, #1
 8000e9a:	e010      	b.n	8000ebe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <SysTick_Config+0x44>)
 8000e9e:	687a      	ldr	r2, [r7, #4]
 8000ea0:	3a01      	subs	r2, #1
 8000ea2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	2103      	movs	r1, #3
 8000eaa:	0018      	movs	r0, r3
 8000eac:	f7ff ff7c 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eb0:	4b05      	ldr	r3, [pc, #20]	; (8000ec8 <SysTick_Config+0x44>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <SysTick_Config+0x44>)
 8000eb8:	2207      	movs	r2, #7
 8000eba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	b002      	add	sp, #8
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	e000e010 	.word	0xe000e010

08000ecc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	1c02      	adds	r2, r0, #0
 8000edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000ede:	68ba      	ldr	r2, [r7, #8]
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	46c0      	nop			; (mov r8, r8)
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	b004      	add	sp, #16
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	0002      	movs	r2, r0
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f02:	1dfb      	adds	r3, r7, #7
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	b25b      	sxtb	r3, r3
 8000f08:	0018      	movs	r0, r3
 8000f0a:	f7ff ff33 	bl	8000d74 <__NVIC_EnableIRQ>
}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	0018      	movs	r0, r3
 8000f22:	f7ff ffaf 	bl	8000e84 <SysTick_Config>
 8000f26:	0003      	movs	r3, r0
}
 8000f28:	0018      	movs	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e036      	b.n	8000fb4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2221      	movs	r2, #33	; 0x21
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <HAL_DMA_Init+0x8c>)
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000f66:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69db      	ldr	r3, [r3, #28]
 8000f84:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f86:	68fa      	ldr	r2, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68fa      	ldr	r2, [r7, #12]
 8000f92:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	0018      	movs	r0, r3
 8000f98:	f000 f8b4 	bl	8001104 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2221      	movs	r2, #33	; 0x21
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2220      	movs	r2, #32
 8000fae:	2100      	movs	r1, #0
 8000fb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b004      	add	sp, #16
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	ffffc00f 	.word	0xffffc00f

08000fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fdc:	2204      	movs	r2, #4
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d024      	beq.n	8001032 <HAL_DMA_IRQHandler+0x72>
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	2204      	movs	r2, #4
 8000fec:	4013      	ands	r3, r2
 8000fee:	d020      	beq.n	8001032 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d107      	bne.n	800100c <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2104      	movs	r1, #4
 8001008:	438a      	bics	r2, r1
 800100a:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001014:	2104      	movs	r1, #4
 8001016:	4091      	lsls	r1, r2
 8001018:	000a      	movs	r2, r1
 800101a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	2b00      	cmp	r3, #0
 8001022:	d100      	bne.n	8001026 <HAL_DMA_IRQHandler+0x66>
 8001024:	e06a      	b.n	80010fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	0010      	movs	r0, r2
 800102e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001030:	e064      	b.n	80010fc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	2202      	movs	r2, #2
 8001038:	409a      	lsls	r2, r3
 800103a:	0013      	movs	r3, r2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4013      	ands	r3, r2
 8001040:	d02b      	beq.n	800109a <HAL_DMA_IRQHandler+0xda>
 8001042:	68bb      	ldr	r3, [r7, #8]
 8001044:	2202      	movs	r2, #2
 8001046:	4013      	ands	r3, r2
 8001048:	d027      	beq.n	800109a <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2220      	movs	r2, #32
 8001052:	4013      	ands	r3, r2
 8001054:	d10b      	bne.n	800106e <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	210a      	movs	r1, #10
 8001062:	438a      	bics	r2, r1
 8001064:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2221      	movs	r2, #33	; 0x21
 800106a:	2101      	movs	r1, #1
 800106c:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001076:	2102      	movs	r1, #2
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2220      	movs	r2, #32
 8001082:	2100      	movs	r1, #0
 8001084:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800108a:	2b00      	cmp	r3, #0
 800108c:	d036      	beq.n	80010fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	0010      	movs	r0, r2
 8001096:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001098:	e030      	b.n	80010fc <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2208      	movs	r2, #8
 80010a0:	409a      	lsls	r2, r3
 80010a2:	0013      	movs	r3, r2
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4013      	ands	r3, r2
 80010a8:	d028      	beq.n	80010fc <HAL_DMA_IRQHandler+0x13c>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2208      	movs	r2, #8
 80010ae:	4013      	ands	r3, r2
 80010b0:	d024      	beq.n	80010fc <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	210e      	movs	r1, #14
 80010be:	438a      	bics	r2, r1
 80010c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010ca:	2101      	movs	r1, #1
 80010cc:	4091      	lsls	r1, r2
 80010ce:	000a      	movs	r2, r1
 80010d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2221      	movs	r2, #33	; 0x21
 80010dc:	2101      	movs	r1, #1
 80010de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2220      	movs	r2, #32
 80010e4:	2100      	movs	r1, #0
 80010e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d005      	beq.n	80010fc <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	0010      	movs	r0, r2
 80010f8:	4798      	blx	r3
    }
  }
}
 80010fa:	e7ff      	b.n	80010fc <HAL_DMA_IRQHandler+0x13c>
 80010fc:	46c0      	nop			; (mov r8, r8)
 80010fe:	46bd      	mov	sp, r7
 8001100:	b004      	add	sp, #16
 8001102:	bd80      	pop	{r7, pc}

08001104 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a08      	ldr	r2, [pc, #32]	; (8001134 <DMA_CalcBaseAndBitshift+0x30>)
 8001112:	4694      	mov	ip, r2
 8001114:	4463      	add	r3, ip
 8001116:	2114      	movs	r1, #20
 8001118:	0018      	movs	r0, r3
 800111a:	f7fe fff5 	bl	8000108 <__udivsi3>
 800111e:	0003      	movs	r3, r0
 8001120:	009a      	lsls	r2, r3, #2
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a03      	ldr	r2, [pc, #12]	; (8001138 <DMA_CalcBaseAndBitshift+0x34>)
 800112a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800112c:	46c0      	nop			; (mov r8, r8)
 800112e:	46bd      	mov	sp, r7
 8001130:	b002      	add	sp, #8
 8001132:	bd80      	pop	{r7, pc}
 8001134:	bffdfff8 	.word	0xbffdfff8
 8001138:	40020000 	.word	0x40020000

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e14f      	b.n	80013ec <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2101      	movs	r1, #1
 8001152:	697a      	ldr	r2, [r7, #20]
 8001154:	4091      	lsls	r1, r2
 8001156:	000a      	movs	r2, r1
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d100      	bne.n	8001164 <HAL_GPIO_Init+0x28>
 8001162:	e140      	b.n	80013e6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2203      	movs	r2, #3
 800116a:	4013      	ands	r3, r2
 800116c:	2b01      	cmp	r3, #1
 800116e:	d005      	beq.n	800117c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2203      	movs	r2, #3
 8001176:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001178:	2b02      	cmp	r3, #2
 800117a:	d130      	bne.n	80011de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	005b      	lsls	r3, r3, #1
 8001186:	2203      	movs	r2, #3
 8001188:	409a      	lsls	r2, r3
 800118a:	0013      	movs	r3, r2
 800118c:	43da      	mvns	r2, r3
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	409a      	lsls	r2, r3
 800119e:	0013      	movs	r3, r2
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b2:	2201      	movs	r2, #1
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
 80011b8:	0013      	movs	r3, r2
 80011ba:	43da      	mvns	r2, r3
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	4013      	ands	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	091b      	lsrs	r3, r3, #4
 80011c8:	2201      	movs	r2, #1
 80011ca:	401a      	ands	r2, r3
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	409a      	lsls	r2, r3
 80011d0:	0013      	movs	r3, r2
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	693a      	ldr	r2, [r7, #16]
 80011dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2203      	movs	r2, #3
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d017      	beq.n	800121a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	68db      	ldr	r3, [r3, #12]
 80011ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	2203      	movs	r2, #3
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2203      	movs	r2, #3
 8001220:	4013      	ands	r3, r2
 8001222:	2b02      	cmp	r3, #2
 8001224:	d123      	bne.n	800126e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	08da      	lsrs	r2, r3, #3
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	3208      	adds	r2, #8
 800122e:	0092      	lsls	r2, r2, #2
 8001230:	58d3      	ldr	r3, [r2, r3]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2207      	movs	r2, #7
 8001238:	4013      	ands	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	220f      	movs	r2, #15
 800123e:	409a      	lsls	r2, r3
 8001240:	0013      	movs	r3, r2
 8001242:	43da      	mvns	r2, r3
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	691a      	ldr	r2, [r3, #16]
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	2107      	movs	r1, #7
 8001252:	400b      	ands	r3, r1
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	409a      	lsls	r2, r3
 8001258:	0013      	movs	r3, r2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	08da      	lsrs	r2, r3, #3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	3208      	adds	r2, #8
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	6939      	ldr	r1, [r7, #16]
 800126c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	2203      	movs	r2, #3
 800127a:	409a      	lsls	r2, r3
 800127c:	0013      	movs	r3, r2
 800127e:	43da      	mvns	r2, r3
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	401a      	ands	r2, r3
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	409a      	lsls	r2, r3
 8001294:	0013      	movs	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	23c0      	movs	r3, #192	; 0xc0
 80012a8:	029b      	lsls	r3, r3, #10
 80012aa:	4013      	ands	r3, r2
 80012ac:	d100      	bne.n	80012b0 <HAL_GPIO_Init+0x174>
 80012ae:	e09a      	b.n	80013e6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b0:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_GPIO_Init+0x2c8>)
 80012b2:	699a      	ldr	r2, [r3, #24]
 80012b4:	4b53      	ldr	r3, [pc, #332]	; (8001404 <HAL_GPIO_Init+0x2c8>)
 80012b6:	2101      	movs	r1, #1
 80012b8:	430a      	orrs	r2, r1
 80012ba:	619a      	str	r2, [r3, #24]
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_GPIO_Init+0x2c8>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	2201      	movs	r2, #1
 80012c2:	4013      	ands	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012c8:	4a4f      	ldr	r2, [pc, #316]	; (8001408 <HAL_GPIO_Init+0x2cc>)
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	089b      	lsrs	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	589b      	ldr	r3, [r3, r2]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2203      	movs	r2, #3
 80012da:	4013      	ands	r3, r2
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	220f      	movs	r2, #15
 80012e0:	409a      	lsls	r2, r3
 80012e2:	0013      	movs	r3, r2
 80012e4:	43da      	mvns	r2, r3
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012ec:	687a      	ldr	r2, [r7, #4]
 80012ee:	2390      	movs	r3, #144	; 0x90
 80012f0:	05db      	lsls	r3, r3, #23
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d013      	beq.n	800131e <HAL_GPIO_Init+0x1e2>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a44      	ldr	r2, [pc, #272]	; (800140c <HAL_GPIO_Init+0x2d0>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d00d      	beq.n	800131a <HAL_GPIO_Init+0x1de>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a43      	ldr	r2, [pc, #268]	; (8001410 <HAL_GPIO_Init+0x2d4>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d007      	beq.n	8001316 <HAL_GPIO_Init+0x1da>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a42      	ldr	r2, [pc, #264]	; (8001414 <HAL_GPIO_Init+0x2d8>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d101      	bne.n	8001312 <HAL_GPIO_Init+0x1d6>
 800130e:	2303      	movs	r3, #3
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x1e4>
 8001312:	2305      	movs	r3, #5
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x1e4>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x1e4>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x1e4>
 800131e:	2300      	movs	r3, #0
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	2103      	movs	r1, #3
 8001324:	400a      	ands	r2, r1
 8001326:	0092      	lsls	r2, r2, #2
 8001328:	4093      	lsls	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001330:	4935      	ldr	r1, [pc, #212]	; (8001408 <HAL_GPIO_Init+0x2cc>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3302      	adds	r3, #2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800133e:	4b36      	ldr	r3, [pc, #216]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	2380      	movs	r3, #128	; 0x80
 8001354:	035b      	lsls	r3, r3, #13
 8001356:	4013      	ands	r3, r2
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001362:	4b2d      	ldr	r3, [pc, #180]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001368:	4b2b      	ldr	r3, [pc, #172]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43da      	mvns	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	4013      	ands	r3, r2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800138c:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001392:	4b21      	ldr	r3, [pc, #132]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	43da      	mvns	r2, r3
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4013      	ands	r3, r2
 80013a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	2380      	movs	r3, #128	; 0x80
 80013a8:	029b      	lsls	r3, r3, #10
 80013aa:	4013      	ands	r3, r2
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013b6:	4b18      	ldr	r3, [pc, #96]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80013bc:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	43da      	mvns	r2, r3
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	4013      	ands	r3, r2
 80013ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685a      	ldr	r2, [r3, #4]
 80013d0:	2380      	movs	r3, #128	; 0x80
 80013d2:	025b      	lsls	r3, r3, #9
 80013d4:	4013      	ands	r3, r2
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4313      	orrs	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013e0:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <HAL_GPIO_Init+0x2dc>)
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	3301      	adds	r3, #1
 80013ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	40da      	lsrs	r2, r3
 80013f4:	1e13      	subs	r3, r2, #0
 80013f6:	d000      	beq.n	80013fa <HAL_GPIO_Init+0x2be>
 80013f8:	e6a8      	b.n	800114c <HAL_GPIO_Init+0x10>
  } 
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46c0      	nop			; (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b006      	add	sp, #24
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40021000 	.word	0x40021000
 8001408:	40010000 	.word	0x40010000
 800140c:	48000400 	.word	0x48000400
 8001410:	48000800 	.word	0x48000800
 8001414:	48000c00 	.word	0x48000c00
 8001418:	40010400 	.word	0x40010400

0800141c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	0008      	movs	r0, r1
 8001426:	0011      	movs	r1, r2
 8001428:	1cbb      	adds	r3, r7, #2
 800142a:	1c02      	adds	r2, r0, #0
 800142c:	801a      	strh	r2, [r3, #0]
 800142e:	1c7b      	adds	r3, r7, #1
 8001430:	1c0a      	adds	r2, r1, #0
 8001432:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001434:	1c7b      	adds	r3, r7, #1
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d004      	beq.n	8001446 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800143c:	1cbb      	adds	r3, r7, #2
 800143e:	881a      	ldrh	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001444:	e003      	b.n	800144e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001446:	1cbb      	adds	r3, r7, #2
 8001448:	881a      	ldrh	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	46bd      	mov	sp, r7
 8001452:	b002      	add	sp, #8
 8001454:	bd80      	pop	{r7, pc}

08001456 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b084      	sub	sp, #16
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	000a      	movs	r2, r1
 8001460:	1cbb      	adds	r3, r7, #2
 8001462:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800146a:	1cbb      	adds	r3, r7, #2
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4013      	ands	r3, r2
 8001472:	041a      	lsls	r2, r3, #16
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	1cb9      	adds	r1, r7, #2
 800147a:	8809      	ldrh	r1, [r1, #0]
 800147c:	400b      	ands	r3, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
}
 8001484:	46c0      	nop			; (mov r8, r8)
 8001486:	46bd      	mov	sp, r7
 8001488:	b004      	add	sp, #16
 800148a:	bd80      	pop	{r7, pc}

0800148c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e082      	b.n	80015a4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2241      	movs	r2, #65	; 0x41
 80014a2:	5c9b      	ldrb	r3, [r3, r2]
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d107      	bne.n	80014ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2240      	movs	r2, #64	; 0x40
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	0018      	movs	r0, r3
 80014b6:	f7ff f82b 	bl	8000510 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2241      	movs	r2, #65	; 0x41
 80014be:	2124      	movs	r1, #36	; 0x24
 80014c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2101      	movs	r1, #1
 80014ce:	438a      	bics	r2, r1
 80014d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4934      	ldr	r1, [pc, #208]	; (80015ac <HAL_I2C_Init+0x120>)
 80014dc:	400a      	ands	r2, r1
 80014de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4931      	ldr	r1, [pc, #196]	; (80015b0 <HAL_I2C_Init+0x124>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d108      	bne.n	800150a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2180      	movs	r1, #128	; 0x80
 8001502:	0209      	lsls	r1, r1, #8
 8001504:	430a      	orrs	r2, r1
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	e007      	b.n	800151a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	689a      	ldr	r2, [r3, #8]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2184      	movs	r1, #132	; 0x84
 8001514:	0209      	lsls	r1, r1, #8
 8001516:	430a      	orrs	r2, r1
 8001518:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d104      	bne.n	800152c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2280      	movs	r2, #128	; 0x80
 8001528:	0112      	lsls	r2, r2, #4
 800152a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	685a      	ldr	r2, [r3, #4]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	491f      	ldr	r1, [pc, #124]	; (80015b4 <HAL_I2C_Init+0x128>)
 8001538:	430a      	orrs	r2, r1
 800153a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	68da      	ldr	r2, [r3, #12]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	491a      	ldr	r1, [pc, #104]	; (80015b0 <HAL_I2C_Init+0x124>)
 8001548:	400a      	ands	r2, r1
 800154a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	691a      	ldr	r2, [r3, #16]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	431a      	orrs	r2, r3
 8001556:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	69d9      	ldr	r1, [r3, #28]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a1a      	ldr	r2, [r3, #32]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	430a      	orrs	r2, r1
 8001574:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2101      	movs	r1, #1
 8001582:	430a      	orrs	r2, r1
 8001584:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2241      	movs	r2, #65	; 0x41
 8001590:	2120      	movs	r1, #32
 8001592:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2242      	movs	r2, #66	; 0x42
 800159e:	2100      	movs	r1, #0
 80015a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b002      	add	sp, #8
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	f0ffffff 	.word	0xf0ffffff
 80015b0:	ffff7fff 	.word	0xffff7fff
 80015b4:	02008000 	.word	0x02008000

080015b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af02      	add	r7, sp, #8
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	0008      	movs	r0, r1
 80015c2:	607a      	str	r2, [r7, #4]
 80015c4:	0019      	movs	r1, r3
 80015c6:	230a      	movs	r3, #10
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	1c02      	adds	r2, r0, #0
 80015cc:	801a      	strh	r2, [r3, #0]
 80015ce:	2308      	movs	r3, #8
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	1c0a      	adds	r2, r1, #0
 80015d4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2241      	movs	r2, #65	; 0x41
 80015da:	5c9b      	ldrb	r3, [r3, r2]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b20      	cmp	r3, #32
 80015e0:	d000      	beq.n	80015e4 <HAL_I2C_Master_Transmit+0x2c>
 80015e2:	e0e7      	b.n	80017b4 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2240      	movs	r2, #64	; 0x40
 80015e8:	5c9b      	ldrb	r3, [r3, r2]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_I2C_Master_Transmit+0x3a>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e0e1      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1fe>
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2240      	movs	r2, #64	; 0x40
 80015f6:	2101      	movs	r1, #1
 80015f8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80015fa:	f7ff fb8d 	bl	8000d18 <HAL_GetTick>
 80015fe:	0003      	movs	r3, r0
 8001600:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001602:	2380      	movs	r3, #128	; 0x80
 8001604:	0219      	lsls	r1, r3, #8
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2319      	movs	r3, #25
 800160e:	2201      	movs	r2, #1
 8001610:	f000 fa04 	bl	8001a1c <I2C_WaitOnFlagUntilTimeout>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d001      	beq.n	800161c <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0cc      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	2241      	movs	r2, #65	; 0x41
 8001620:	2121      	movs	r1, #33	; 0x21
 8001622:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2242      	movs	r2, #66	; 0x42
 8001628:	2110      	movs	r1, #16
 800162a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2200      	movs	r2, #0
 8001630:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2208      	movs	r2, #8
 800163c:	18ba      	adds	r2, r7, r2
 800163e:	8812      	ldrh	r2, [r2, #0]
 8001640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2200      	movs	r2, #0
 8001646:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800164c:	b29b      	uxth	r3, r3
 800164e:	2bff      	cmp	r3, #255	; 0xff
 8001650:	d911      	bls.n	8001676 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	22ff      	movs	r2, #255	; 0xff
 8001656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800165c:	b2da      	uxtb	r2, r3
 800165e:	2380      	movs	r3, #128	; 0x80
 8001660:	045c      	lsls	r4, r3, #17
 8001662:	230a      	movs	r3, #10
 8001664:	18fb      	adds	r3, r7, r3
 8001666:	8819      	ldrh	r1, [r3, #0]
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <HAL_I2C_Master_Transmit+0x208>)
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	0023      	movs	r3, r4
 8001670:	f000 fc2e 	bl	8001ed0 <I2C_TransferConfig>
 8001674:	e075      	b.n	8001762 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001684:	b2da      	uxtb	r2, r3
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	049c      	lsls	r4, r3, #18
 800168a:	230a      	movs	r3, #10
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	8819      	ldrh	r1, [r3, #0]
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <HAL_I2C_Master_Transmit+0x208>)
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	0023      	movs	r3, r4
 8001698:	f000 fc1a 	bl	8001ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800169c:	e061      	b.n	8001762 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169e:	697a      	ldr	r2, [r7, #20]
 80016a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 fa07 	bl	8001ab8 <I2C_WaitOnTXISFlagUntilTimeout>
 80016aa:	1e03      	subs	r3, r0, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e081      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	3b01      	subs	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29a      	uxth	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e6:	b29b      	uxth	r3, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d03a      	beq.n	8001762 <HAL_I2C_Master_Transmit+0x1aa>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d136      	bne.n	8001762 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	9300      	str	r3, [sp, #0]
 80016fc:	0013      	movs	r3, r2
 80016fe:	2200      	movs	r2, #0
 8001700:	2180      	movs	r1, #128	; 0x80
 8001702:	f000 f98b 	bl	8001a1c <I2C_WaitOnFlagUntilTimeout>
 8001706:	1e03      	subs	r3, r0, #0
 8001708:	d001      	beq.n	800170e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e053      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001712:	b29b      	uxth	r3, r3
 8001714:	2bff      	cmp	r3, #255	; 0xff
 8001716:	d911      	bls.n	800173c <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	22ff      	movs	r2, #255	; 0xff
 800171c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001722:	b2da      	uxtb	r2, r3
 8001724:	2380      	movs	r3, #128	; 0x80
 8001726:	045c      	lsls	r4, r3, #17
 8001728:	230a      	movs	r3, #10
 800172a:	18fb      	adds	r3, r7, r3
 800172c:	8819      	ldrh	r1, [r3, #0]
 800172e:	68f8      	ldr	r0, [r7, #12]
 8001730:	2300      	movs	r3, #0
 8001732:	9300      	str	r3, [sp, #0]
 8001734:	0023      	movs	r3, r4
 8001736:	f000 fbcb 	bl	8001ed0 <I2C_TransferConfig>
 800173a:	e012      	b.n	8001762 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800174a:	b2da      	uxtb	r2, r3
 800174c:	2380      	movs	r3, #128	; 0x80
 800174e:	049c      	lsls	r4, r3, #18
 8001750:	230a      	movs	r3, #10
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	8819      	ldrh	r1, [r3, #0]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	2300      	movs	r3, #0
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	0023      	movs	r3, r4
 800175e:	f000 fbb7 	bl	8001ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001766:	b29b      	uxth	r3, r3
 8001768:	2b00      	cmp	r3, #0
 800176a:	d198      	bne.n	800169e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	0018      	movs	r0, r3
 8001774:	f000 f9e6 	bl	8001b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001778:	1e03      	subs	r3, r0, #0
 800177a:	d001      	beq.n	8001780 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e01a      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2220      	movs	r2, #32
 8001786:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	685a      	ldr	r2, [r3, #4]
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	490c      	ldr	r1, [pc, #48]	; (80017c4 <HAL_I2C_Master_Transmit+0x20c>)
 8001794:	400a      	ands	r2, r1
 8001796:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	2241      	movs	r2, #65	; 0x41
 800179c:	2120      	movs	r1, #32
 800179e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2242      	movs	r2, #66	; 0x42
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2240      	movs	r2, #64	; 0x40
 80017ac:	2100      	movs	r1, #0
 80017ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	e000      	b.n	80017b6 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 80017b4:	2302      	movs	r3, #2
  }
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b007      	add	sp, #28
 80017bc:	bd90      	pop	{r4, r7, pc}
 80017be:	46c0      	nop			; (mov r8, r8)
 80017c0:	80002000 	.word	0x80002000
 80017c4:	fe00e800 	.word	0xfe00e800

080017c8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b089      	sub	sp, #36	; 0x24
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	0008      	movs	r0, r1
 80017d2:	607a      	str	r2, [r7, #4]
 80017d4:	0019      	movs	r1, r3
 80017d6:	230a      	movs	r3, #10
 80017d8:	18fb      	adds	r3, r7, r3
 80017da:	1c02      	adds	r2, r0, #0
 80017dc:	801a      	strh	r2, [r3, #0]
 80017de:	2308      	movs	r3, #8
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	1c0a      	adds	r2, r1, #0
 80017e4:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2241      	movs	r2, #65	; 0x41
 80017ea:	5c9b      	ldrb	r3, [r3, r2]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	d000      	beq.n	80017f4 <HAL_I2C_Master_Receive+0x2c>
 80017f2:	e0e8      	b.n	80019c6 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	2240      	movs	r2, #64	; 0x40
 80017f8:	5c9b      	ldrb	r3, [r3, r2]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_I2C_Master_Receive+0x3a>
 80017fe:	2302      	movs	r3, #2
 8001800:	e0e2      	b.n	80019c8 <HAL_I2C_Master_Receive+0x200>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	2240      	movs	r2, #64	; 0x40
 8001806:	2101      	movs	r1, #1
 8001808:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800180a:	f7ff fa85 	bl	8000d18 <HAL_GetTick>
 800180e:	0003      	movs	r3, r0
 8001810:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001812:	2380      	movs	r3, #128	; 0x80
 8001814:	0219      	lsls	r1, r3, #8
 8001816:	68f8      	ldr	r0, [r7, #12]
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	2319      	movs	r3, #25
 800181e:	2201      	movs	r2, #1
 8001820:	f000 f8fc 	bl	8001a1c <I2C_WaitOnFlagUntilTimeout>
 8001824:	1e03      	subs	r3, r0, #0
 8001826:	d001      	beq.n	800182c <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0cd      	b.n	80019c8 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2241      	movs	r2, #65	; 0x41
 8001830:	2122      	movs	r1, #34	; 0x22
 8001832:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2242      	movs	r2, #66	; 0x42
 8001838:	2110      	movs	r1, #16
 800183a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2200      	movs	r2, #0
 8001840:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2208      	movs	r2, #8
 800184c:	18ba      	adds	r2, r7, r2
 800184e:	8812      	ldrh	r2, [r2, #0]
 8001850:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800185c:	b29b      	uxth	r3, r3
 800185e:	2bff      	cmp	r3, #255	; 0xff
 8001860:	d911      	bls.n	8001886 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	22ff      	movs	r2, #255	; 0xff
 8001866:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800186c:	b2da      	uxtb	r2, r3
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	045c      	lsls	r4, r3, #17
 8001872:	230a      	movs	r3, #10
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	8819      	ldrh	r1, [r3, #0]
 8001878:	68f8      	ldr	r0, [r7, #12]
 800187a:	4b55      	ldr	r3, [pc, #340]	; (80019d0 <HAL_I2C_Master_Receive+0x208>)
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	0023      	movs	r3, r4
 8001880:	f000 fb26 	bl	8001ed0 <I2C_TransferConfig>
 8001884:	e076      	b.n	8001974 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001894:	b2da      	uxtb	r2, r3
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	049c      	lsls	r4, r3, #18
 800189a:	230a      	movs	r3, #10
 800189c:	18fb      	adds	r3, r7, r3
 800189e:	8819      	ldrh	r1, [r3, #0]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_I2C_Master_Receive+0x208>)
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	0023      	movs	r3, r4
 80018a8:	f000 fb12 	bl	8001ed0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80018ac:	e062      	b.n	8001974 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	0018      	movs	r0, r3
 80018b6:	f000 f989 	bl	8001bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80018ba:	1e03      	subs	r3, r0, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e082      	b.n	80019c8 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	b2d2      	uxtb	r2, r2
 80018ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018de:	3b01      	subs	r3, #1
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	3b01      	subs	r3, #1
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d03a      	beq.n	8001974 <HAL_I2C_Master_Receive+0x1ac>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	2b00      	cmp	r3, #0
 8001904:	d136      	bne.n	8001974 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001906:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	0013      	movs	r3, r2
 8001910:	2200      	movs	r2, #0
 8001912:	2180      	movs	r1, #128	; 0x80
 8001914:	f000 f882 	bl	8001a1c <I2C_WaitOnFlagUntilTimeout>
 8001918:	1e03      	subs	r3, r0, #0
 800191a:	d001      	beq.n	8001920 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e053      	b.n	80019c8 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001924:	b29b      	uxth	r3, r3
 8001926:	2bff      	cmp	r3, #255	; 0xff
 8001928:	d911      	bls.n	800194e <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	22ff      	movs	r2, #255	; 0xff
 800192e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001934:	b2da      	uxtb	r2, r3
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	045c      	lsls	r4, r3, #17
 800193a:	230a      	movs	r3, #10
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	8819      	ldrh	r1, [r3, #0]
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	9300      	str	r3, [sp, #0]
 8001946:	0023      	movs	r3, r4
 8001948:	f000 fac2 	bl	8001ed0 <I2C_TransferConfig>
 800194c:	e012      	b.n	8001974 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001952:	b29a      	uxth	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800195c:	b2da      	uxtb	r2, r3
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	049c      	lsls	r4, r3, #18
 8001962:	230a      	movs	r3, #10
 8001964:	18fb      	adds	r3, r7, r3
 8001966:	8819      	ldrh	r1, [r3, #0]
 8001968:	68f8      	ldr	r0, [r7, #12]
 800196a:	2300      	movs	r3, #0
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	0023      	movs	r3, r4
 8001970:	f000 faae 	bl	8001ed0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001978:	b29b      	uxth	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d197      	bne.n	80018ae <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	0018      	movs	r0, r3
 8001986:	f000 f8dd 	bl	8001b44 <I2C_WaitOnSTOPFlagUntilTimeout>
 800198a:	1e03      	subs	r3, r0, #0
 800198c:	d001      	beq.n	8001992 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e01a      	b.n	80019c8 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2220      	movs	r2, #32
 8001998:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	685a      	ldr	r2, [r3, #4]
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	490b      	ldr	r1, [pc, #44]	; (80019d4 <HAL_I2C_Master_Receive+0x20c>)
 80019a6:	400a      	ands	r2, r1
 80019a8:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2241      	movs	r2, #65	; 0x41
 80019ae:	2120      	movs	r1, #32
 80019b0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2242      	movs	r2, #66	; 0x42
 80019b6:	2100      	movs	r1, #0
 80019b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2240      	movs	r2, #64	; 0x40
 80019be:	2100      	movs	r1, #0
 80019c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	e000      	b.n	80019c8 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 80019c6:	2302      	movs	r3, #2
  }
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b007      	add	sp, #28
 80019ce:	bd90      	pop	{r4, r7, pc}
 80019d0:	80002400 	.word	0x80002400
 80019d4:	fe00e800 	.word	0xfe00e800

080019d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2202      	movs	r2, #2
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d103      	bne.n	80019f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2200      	movs	r2, #0
 80019f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	699b      	ldr	r3, [r3, #24]
 80019fc:	2201      	movs	r2, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d007      	beq.n	8001a14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699a      	ldr	r2, [r3, #24]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2101      	movs	r1, #1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	619a      	str	r2, [r3, #24]
  }
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	b002      	add	sp, #8
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	603b      	str	r3, [r7, #0]
 8001a28:	1dfb      	adds	r3, r7, #7
 8001a2a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a2c:	e030      	b.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	3301      	adds	r3, #1
 8001a32:	d02d      	beq.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a34:	f7ff f970 	bl	8000d18 <HAL_GetTick>
 8001a38:	0002      	movs	r2, r0
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d302      	bcc.n	8001a4a <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d122      	bne.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	4013      	ands	r3, r2
 8001a54:	68ba      	ldr	r2, [r7, #8]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	425a      	negs	r2, r3
 8001a5a:	4153      	adcs	r3, r2
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	001a      	movs	r2, r3
 8001a60:	1dfb      	adds	r3, r7, #7
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d113      	bne.n	8001a90 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2241      	movs	r2, #65	; 0x41
 8001a78:	2120      	movs	r1, #32
 8001a7a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2242      	movs	r2, #66	; 0x42
 8001a80:	2100      	movs	r1, #0
 8001a82:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	2100      	movs	r1, #0
 8001a8a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00f      	b.n	8001ab0 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	425a      	negs	r2, r3
 8001aa0:	4153      	adcs	r3, r2
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	001a      	movs	r2, r3
 8001aa6:	1dfb      	adds	r3, r7, #7
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d0bf      	beq.n	8001a2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	b004      	add	sp, #16
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	60f8      	str	r0, [r7, #12]
 8001ac0:	60b9      	str	r1, [r7, #8]
 8001ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ac4:	e032      	b.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	0018      	movs	r0, r3
 8001ace:	f000 f8ff 	bl	8001cd0 <I2C_IsErrorOccurred>
 8001ad2:	1e03      	subs	r3, r0, #0
 8001ad4:	d001      	beq.n	8001ada <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e030      	b.n	8001b3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	3301      	adds	r3, #1
 8001ade:	d025      	beq.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ae0:	f7ff f91a 	bl	8000d18 <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d302      	bcc.n	8001af6 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d11a      	bne.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2202      	movs	r2, #2
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d013      	beq.n	8001b2c <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b08:	2220      	movs	r2, #32
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2241      	movs	r2, #65	; 0x41
 8001b14:	2120      	movs	r1, #32
 8001b16:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2242      	movs	r2, #66	; 0x42
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2240      	movs	r2, #64	; 0x40
 8001b24:	2100      	movs	r1, #0
 8001b26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e007      	b.n	8001b3c <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	699b      	ldr	r3, [r3, #24]
 8001b32:	2202      	movs	r2, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d1c5      	bne.n	8001ac6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b004      	add	sp, #16
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b50:	e02f      	b.n	8001bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f000 f8b9 	bl	8001cd0 <I2C_IsErrorOccurred>
 8001b5e:	1e03      	subs	r3, r0, #0
 8001b60:	d001      	beq.n	8001b66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e02d      	b.n	8001bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b66:	f7ff f8d7 	bl	8000d18 <HAL_GetTick>
 8001b6a:	0002      	movs	r2, r0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d302      	bcc.n	8001b7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d11a      	bne.n	8001bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	2220      	movs	r2, #32
 8001b84:	4013      	ands	r3, r2
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	d013      	beq.n	8001bb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	2220      	movs	r2, #32
 8001b90:	431a      	orrs	r2, r3
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2241      	movs	r2, #65	; 0x41
 8001b9a:	2120      	movs	r1, #32
 8001b9c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2242      	movs	r2, #66	; 0x42
 8001ba2:	2100      	movs	r1, #0
 8001ba4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2240      	movs	r2, #64	; 0x40
 8001baa:	2100      	movs	r1, #0
 8001bac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e007      	b.n	8001bc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	699b      	ldr	r3, [r3, #24]
 8001bb8:	2220      	movs	r2, #32
 8001bba:	4013      	ands	r3, r2
 8001bbc:	2b20      	cmp	r3, #32
 8001bbe:	d1c8      	bne.n	8001b52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	0018      	movs	r0, r3
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b004      	add	sp, #16
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001bd8:	e06b      	b.n	8001cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	0018      	movs	r0, r3
 8001be2:	f000 f875 	bl	8001cd0 <I2C_IsErrorOccurred>
 8001be6:	1e03      	subs	r3, r0, #0
 8001be8:	d001      	beq.n	8001bee <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e069      	b.n	8001cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	2220      	movs	r2, #32
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b20      	cmp	r3, #32
 8001bfa:	d138      	bne.n	8001c6e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2204      	movs	r2, #4
 8001c04:	4013      	ands	r3, r2
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	d105      	bne.n	8001c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e055      	b.n	8001cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	699b      	ldr	r3, [r3, #24]
 8001c1c:	2210      	movs	r2, #16
 8001c1e:	4013      	ands	r3, r2
 8001c20:	2b10      	cmp	r3, #16
 8001c22:	d107      	bne.n	8001c34 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2210      	movs	r2, #16
 8001c2a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2204      	movs	r2, #4
 8001c30:	645a      	str	r2, [r3, #68]	; 0x44
 8001c32:	e002      	b.n	8001c3a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2220      	movs	r2, #32
 8001c40:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685a      	ldr	r2, [r3, #4]
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	491f      	ldr	r1, [pc, #124]	; (8001ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8001c4e:	400a      	ands	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2241      	movs	r2, #65	; 0x41
 8001c56:	2120      	movs	r1, #32
 8001c58:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2242      	movs	r2, #66	; 0x42
 8001c5e:	2100      	movs	r1, #0
 8001c60:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2240      	movs	r2, #64	; 0x40
 8001c66:	2100      	movs	r1, #0
 8001c68:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e029      	b.n	8001cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6e:	f7ff f853 	bl	8000d18 <HAL_GetTick>
 8001c72:	0002      	movs	r2, r0
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	68ba      	ldr	r2, [r7, #8]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d302      	bcc.n	8001c84 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d116      	bne.n	8001cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2204      	movs	r2, #4
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d00f      	beq.n	8001cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	2220      	movs	r2, #32
 8001c98:	431a      	orrs	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2241      	movs	r2, #65	; 0x41
 8001ca2:	2120      	movs	r1, #32
 8001ca4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2240      	movs	r2, #64	; 0x40
 8001caa:	2100      	movs	r1, #0
 8001cac:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e007      	b.n	8001cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	d18c      	bne.n	8001bda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	fe00e800 	.word	0xfe00e800

08001cd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001cd0:	b590      	push	{r4, r7, lr}
 8001cd2:	b08b      	sub	sp, #44	; 0x2c
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	60f8      	str	r0, [r7, #12]
 8001cd8:	60b9      	str	r1, [r7, #8]
 8001cda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cdc:	2327      	movs	r3, #39	; 0x27
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2210      	movs	r2, #16
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d100      	bne.n	8001cfe <I2C_IsErrorOccurred+0x2e>
 8001cfc:	e082      	b.n	8001e04 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2210      	movs	r2, #16
 8001d04:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001d06:	e060      	b.n	8001dca <I2C_IsErrorOccurred+0xfa>
 8001d08:	2427      	movs	r4, #39	; 0x27
 8001d0a:	193b      	adds	r3, r7, r4
 8001d0c:	193a      	adds	r2, r7, r4
 8001d0e:	7812      	ldrb	r2, [r2, #0]
 8001d10:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	3301      	adds	r3, #1
 8001d16:	d058      	beq.n	8001dca <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d18:	f7fe fffe 	bl	8000d18 <HAL_GetTick>
 8001d1c:	0002      	movs	r2, r0
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	68ba      	ldr	r2, [r7, #8]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d306      	bcc.n	8001d36 <I2C_IsErrorOccurred+0x66>
 8001d28:	193b      	adds	r3, r7, r4
 8001d2a:	193a      	adds	r2, r7, r4
 8001d2c:	7812      	ldrb	r2, [r2, #0]
 8001d2e:	701a      	strb	r2, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d149      	bne.n	8001dca <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	4013      	ands	r3, r2
 8001d42:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001d44:	2013      	movs	r0, #19
 8001d46:	183b      	adds	r3, r7, r0
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	2142      	movs	r1, #66	; 0x42
 8001d4c:	5c52      	ldrb	r2, [r2, r1]
 8001d4e:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699a      	ldr	r2, [r3, #24]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	021b      	lsls	r3, r3, #8
 8001d5a:	401a      	ands	r2, r3
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	021b      	lsls	r3, r3, #8
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d126      	bne.n	8001db2 <I2C_IsErrorOccurred+0xe2>
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	01db      	lsls	r3, r3, #7
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d021      	beq.n	8001db2 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b20      	cmp	r3, #32
 8001d74:	d01d      	beq.n	8001db2 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	01c9      	lsls	r1, r1, #7
 8001d84:	430a      	orrs	r2, r1
 8001d86:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001d88:	f7fe ffc6 	bl	8000d18 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d90:	e00f      	b.n	8001db2 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001d92:	f7fe ffc1 	bl	8000d18 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	2b19      	cmp	r3, #25
 8001d9e:	d908      	bls.n	8001db2 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001da0:	6a3b      	ldr	r3, [r7, #32]
 8001da2:	2220      	movs	r2, #32
 8001da4:	4313      	orrs	r3, r2
 8001da6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001da8:	2327      	movs	r3, #39	; 0x27
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]

              break;
 8001db0:	e00b      	b.n	8001dca <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2220      	movs	r2, #32
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2127      	movs	r1, #39	; 0x27
 8001dbe:	187a      	adds	r2, r7, r1
 8001dc0:	1879      	adds	r1, r7, r1
 8001dc2:	7809      	ldrb	r1, [r1, #0]
 8001dc4:	7011      	strb	r1, [r2, #0]
 8001dc6:	2b20      	cmp	r3, #32
 8001dc8:	d1e3      	bne.n	8001d92 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b20      	cmp	r3, #32
 8001dd6:	d004      	beq.n	8001de2 <I2C_IsErrorOccurred+0x112>
 8001dd8:	2327      	movs	r3, #39	; 0x27
 8001dda:	18fb      	adds	r3, r7, r3
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d092      	beq.n	8001d08 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001de2:	2327      	movs	r3, #39	; 0x27
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d103      	bne.n	8001df4 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2220      	movs	r2, #32
 8001df2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	2204      	movs	r2, #4
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001dfc:	2327      	movs	r3, #39	; 0x27
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	2201      	movs	r2, #1
 8001e02:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4013      	ands	r3, r2
 8001e14:	d00c      	beq.n	8001e30 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	0052      	lsls	r2, r2, #1
 8001e26:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e28:	2327      	movs	r3, #39	; 0x27
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	2380      	movs	r3, #128	; 0x80
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4013      	ands	r3, r2
 8001e38:	d00c      	beq.n	8001e54 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001e3a:	6a3b      	ldr	r3, [r7, #32]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2280      	movs	r2, #128	; 0x80
 8001e48:	00d2      	lsls	r2, r2, #3
 8001e4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e4c:	2327      	movs	r3, #39	; 0x27
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	2201      	movs	r2, #1
 8001e52:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	2380      	movs	r3, #128	; 0x80
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	d00c      	beq.n	8001e78 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4313      	orrs	r3, r2
 8001e64:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2280      	movs	r2, #128	; 0x80
 8001e6c:	0092      	lsls	r2, r2, #2
 8001e6e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001e70:	2327      	movs	r3, #39	; 0x27
 8001e72:	18fb      	adds	r3, r7, r3
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001e78:	2327      	movs	r3, #39	; 0x27
 8001e7a:	18fb      	adds	r3, r7, r3
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01d      	beq.n	8001ebe <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	0018      	movs	r0, r3
 8001e86:	f7ff fda7 	bl	80019d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	490d      	ldr	r1, [pc, #52]	; (8001ecc <I2C_IsErrorOccurred+0x1fc>)
 8001e96:	400a      	ands	r2, r1
 8001e98:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e9e:	6a3b      	ldr	r3, [r7, #32]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2241      	movs	r2, #65	; 0x41
 8001eaa:	2120      	movs	r1, #32
 8001eac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2242      	movs	r2, #66	; 0x42
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2240      	movs	r2, #64	; 0x40
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001ebe:	2327      	movs	r3, #39	; 0x27
 8001ec0:	18fb      	adds	r3, r7, r3
 8001ec2:	781b      	ldrb	r3, [r3, #0]
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	b00b      	add	sp, #44	; 0x2c
 8001eca:	bd90      	pop	{r4, r7, pc}
 8001ecc:	fe00e800 	.word	0xfe00e800

08001ed0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ed0:	b590      	push	{r4, r7, lr}
 8001ed2:	b087      	sub	sp, #28
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	0008      	movs	r0, r1
 8001eda:	0011      	movs	r1, r2
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	240a      	movs	r4, #10
 8001ee0:	193b      	adds	r3, r7, r4
 8001ee2:	1c02      	adds	r2, r0, #0
 8001ee4:	801a      	strh	r2, [r3, #0]
 8001ee6:	2009      	movs	r0, #9
 8001ee8:	183b      	adds	r3, r7, r0
 8001eea:	1c0a      	adds	r2, r1, #0
 8001eec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	059b      	lsls	r3, r3, #22
 8001ef4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001ef6:	183b      	adds	r3, r7, r0
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	0419      	lsls	r1, r3, #16
 8001efc:	23ff      	movs	r3, #255	; 0xff
 8001efe:	041b      	lsls	r3, r3, #16
 8001f00:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f02:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	085b      	lsrs	r3, r3, #1
 8001f10:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f1a:	0d51      	lsrs	r1, r2, #21
 8001f1c:	2280      	movs	r2, #128	; 0x80
 8001f1e:	00d2      	lsls	r2, r2, #3
 8001f20:	400a      	ands	r2, r1
 8001f22:	4907      	ldr	r1, [pc, #28]	; (8001f40 <I2C_TransferConfig+0x70>)
 8001f24:	430a      	orrs	r2, r1
 8001f26:	43d2      	mvns	r2, r2
 8001f28:	401a      	ands	r2, r3
 8001f2a:	0011      	movs	r1, r2
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001f36:	46c0      	nop			; (mov r8, r8)
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	b007      	add	sp, #28
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	03ff63ff 	.word	0x03ff63ff

08001f44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2241      	movs	r2, #65	; 0x41
 8001f52:	5c9b      	ldrb	r3, [r3, r2]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d138      	bne.n	8001fcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2240      	movs	r2, #64	; 0x40
 8001f5e:	5c9b      	ldrb	r3, [r3, r2]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e032      	b.n	8001fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2241      	movs	r2, #65	; 0x41
 8001f74:	2124      	movs	r1, #36	; 0x24
 8001f76:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2101      	movs	r1, #1
 8001f84:	438a      	bics	r2, r1
 8001f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4911      	ldr	r1, [pc, #68]	; (8001fd8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f94:	400a      	ands	r2, r1
 8001f96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6819      	ldr	r1, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2101      	movs	r1, #1
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2241      	movs	r2, #65	; 0x41
 8001fbc:	2120      	movs	r1, #32
 8001fbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2240      	movs	r2, #64	; 0x40
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	e000      	b.n	8001fce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001fcc:	2302      	movs	r3, #2
  }
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b002      	add	sp, #8
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	ffffefff 	.word	0xffffefff

08001fdc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2241      	movs	r2, #65	; 0x41
 8001fea:	5c9b      	ldrb	r3, [r3, r2]
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	2b20      	cmp	r3, #32
 8001ff0:	d139      	bne.n	8002066 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2240      	movs	r2, #64	; 0x40
 8001ff6:	5c9b      	ldrb	r3, [r3, r2]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d101      	bne.n	8002000 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e033      	b.n	8002068 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2240      	movs	r2, #64	; 0x40
 8002004:	2101      	movs	r1, #1
 8002006:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2241      	movs	r2, #65	; 0x41
 800200c:	2124      	movs	r1, #36	; 0x24
 800200e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2101      	movs	r1, #1
 800201c:	438a      	bics	r2, r1
 800201e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2101      	movs	r1, #1
 800204e:	430a      	orrs	r2, r1
 8002050:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2241      	movs	r2, #65	; 0x41
 8002056:	2120      	movs	r1, #32
 8002058:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2240      	movs	r2, #64	; 0x40
 800205e:	2100      	movs	r1, #0
 8002060:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002062:	2300      	movs	r3, #0
 8002064:	e000      	b.n	8002068 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002066:	2302      	movs	r3, #2
  }
}
 8002068:	0018      	movs	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}
 8002070:	fffff0ff 	.word	0xfffff0ff

08002074 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e301      	b.n	800268a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	d100      	bne.n	8002092 <HAL_RCC_OscConfig+0x1e>
 8002090:	e08d      	b.n	80021ae <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002092:	4bc3      	ldr	r3, [pc, #780]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	220c      	movs	r2, #12
 8002098:	4013      	ands	r3, r2
 800209a:	2b04      	cmp	r3, #4
 800209c:	d00e      	beq.n	80020bc <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800209e:	4bc0      	ldr	r3, [pc, #768]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	220c      	movs	r2, #12
 80020a4:	4013      	ands	r3, r2
 80020a6:	2b08      	cmp	r3, #8
 80020a8:	d116      	bne.n	80020d8 <HAL_RCC_OscConfig+0x64>
 80020aa:	4bbd      	ldr	r3, [pc, #756]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020ac:	685a      	ldr	r2, [r3, #4]
 80020ae:	2380      	movs	r3, #128	; 0x80
 80020b0:	025b      	lsls	r3, r3, #9
 80020b2:	401a      	ands	r2, r3
 80020b4:	2380      	movs	r3, #128	; 0x80
 80020b6:	025b      	lsls	r3, r3, #9
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d10d      	bne.n	80020d8 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020bc:	4bb8      	ldr	r3, [pc, #736]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	2380      	movs	r3, #128	; 0x80
 80020c2:	029b      	lsls	r3, r3, #10
 80020c4:	4013      	ands	r3, r2
 80020c6:	d100      	bne.n	80020ca <HAL_RCC_OscConfig+0x56>
 80020c8:	e070      	b.n	80021ac <HAL_RCC_OscConfig+0x138>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d000      	beq.n	80020d4 <HAL_RCC_OscConfig+0x60>
 80020d2:	e06b      	b.n	80021ac <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e2d8      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_OscConfig+0x7c>
 80020e0:	4baf      	ldr	r3, [pc, #700]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4bae      	ldr	r3, [pc, #696]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	2180      	movs	r1, #128	; 0x80
 80020e8:	0249      	lsls	r1, r1, #9
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e02f      	b.n	8002150 <HAL_RCC_OscConfig+0xdc>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x9e>
 80020f8:	4ba9      	ldr	r3, [pc, #676]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4ba8      	ldr	r3, [pc, #672]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020fe:	49a9      	ldr	r1, [pc, #676]	; (80023a4 <HAL_RCC_OscConfig+0x330>)
 8002100:	400a      	ands	r2, r1
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	4ba6      	ldr	r3, [pc, #664]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	4ba5      	ldr	r3, [pc, #660]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800210a:	49a7      	ldr	r1, [pc, #668]	; (80023a8 <HAL_RCC_OscConfig+0x334>)
 800210c:	400a      	ands	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e01e      	b.n	8002150 <HAL_RCC_OscConfig+0xdc>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b05      	cmp	r3, #5
 8002118:	d10e      	bne.n	8002138 <HAL_RCC_OscConfig+0xc4>
 800211a:	4ba1      	ldr	r3, [pc, #644]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4ba0      	ldr	r3, [pc, #640]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002120:	2180      	movs	r1, #128	; 0x80
 8002122:	02c9      	lsls	r1, r1, #11
 8002124:	430a      	orrs	r2, r1
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	4b9d      	ldr	r3, [pc, #628]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b9c      	ldr	r3, [pc, #624]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800212e:	2180      	movs	r1, #128	; 0x80
 8002130:	0249      	lsls	r1, r1, #9
 8002132:	430a      	orrs	r2, r1
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xdc>
 8002138:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	4b98      	ldr	r3, [pc, #608]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800213e:	4999      	ldr	r1, [pc, #612]	; (80023a4 <HAL_RCC_OscConfig+0x330>)
 8002140:	400a      	ands	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	4b96      	ldr	r3, [pc, #600]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	4b95      	ldr	r3, [pc, #596]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800214a:	4997      	ldr	r1, [pc, #604]	; (80023a8 <HAL_RCC_OscConfig+0x334>)
 800214c:	400a      	ands	r2, r1
 800214e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d014      	beq.n	8002182 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe fdde 	bl	8000d18 <HAL_GetTick>
 800215c:	0003      	movs	r3, r0
 800215e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002160:	e008      	b.n	8002174 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002162:	f7fe fdd9 	bl	8000d18 <HAL_GetTick>
 8002166:	0002      	movs	r2, r0
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b64      	cmp	r3, #100	; 0x64
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e28a      	b.n	800268a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002174:	4b8a      	ldr	r3, [pc, #552]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	029b      	lsls	r3, r3, #10
 800217c:	4013      	ands	r3, r2
 800217e:	d0f0      	beq.n	8002162 <HAL_RCC_OscConfig+0xee>
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002182:	f7fe fdc9 	bl	8000d18 <HAL_GetTick>
 8002186:	0003      	movs	r3, r0
 8002188:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe fdc4 	bl	8000d18 <HAL_GetTick>
 8002190:	0002      	movs	r2, r0
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e275      	b.n	800268a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	4b80      	ldr	r3, [pc, #512]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	2380      	movs	r3, #128	; 0x80
 80021a4:	029b      	lsls	r3, r3, #10
 80021a6:	4013      	ands	r3, r2
 80021a8:	d1f0      	bne.n	800218c <HAL_RCC_OscConfig+0x118>
 80021aa:	e000      	b.n	80021ae <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ac:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2202      	movs	r2, #2
 80021b4:	4013      	ands	r3, r2
 80021b6:	d100      	bne.n	80021ba <HAL_RCC_OscConfig+0x146>
 80021b8:	e069      	b.n	800228e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80021ba:	4b79      	ldr	r3, [pc, #484]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	220c      	movs	r2, #12
 80021c0:	4013      	ands	r3, r2
 80021c2:	d00b      	beq.n	80021dc <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021c4:	4b76      	ldr	r3, [pc, #472]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	220c      	movs	r2, #12
 80021ca:	4013      	ands	r3, r2
 80021cc:	2b08      	cmp	r3, #8
 80021ce:	d11c      	bne.n	800220a <HAL_RCC_OscConfig+0x196>
 80021d0:	4b73      	ldr	r3, [pc, #460]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	685a      	ldr	r2, [r3, #4]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	4013      	ands	r3, r2
 80021da:	d116      	bne.n	800220a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021dc:	4b70      	ldr	r3, [pc, #448]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2202      	movs	r2, #2
 80021e2:	4013      	ands	r3, r2
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x17e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e24b      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	22f8      	movs	r2, #248	; 0xf8
 80021f8:	4393      	bics	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	00da      	lsls	r2, r3, #3
 8002202:	4b67      	ldr	r3, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002204:	430a      	orrs	r2, r1
 8002206:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002208:	e041      	b.n	800228e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d024      	beq.n	800225c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002218:	2101      	movs	r1, #1
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fd7b 	bl	8000d18 <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002228:	f7fe fd76 	bl	8000d18 <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e227      	b.n	800268a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b59      	ldr	r3, [pc, #356]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2202      	movs	r2, #2
 8002240:	4013      	ands	r3, r2
 8002242:	d0f1      	beq.n	8002228 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002244:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	22f8      	movs	r2, #248	; 0xf8
 800224a:	4393      	bics	r3, r2
 800224c:	0019      	movs	r1, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	00da      	lsls	r2, r3, #3
 8002254:	4b52      	ldr	r3, [pc, #328]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	e018      	b.n	800228e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225c:	4b50      	ldr	r3, [pc, #320]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002262:	2101      	movs	r1, #1
 8002264:	438a      	bics	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fd56 	bl	8000d18 <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002272:	f7fe fd51 	bl	8000d18 <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e202      	b.n	800268a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002284:	4b46      	ldr	r3, [pc, #280]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2202      	movs	r2, #2
 800228a:	4013      	ands	r3, r2
 800228c:	d1f1      	bne.n	8002272 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2208      	movs	r2, #8
 8002294:	4013      	ands	r3, r2
 8002296:	d036      	beq.n	8002306 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	69db      	ldr	r3, [r3, #28]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d019      	beq.n	80022d4 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a0:	4b3f      	ldr	r3, [pc, #252]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022a4:	4b3e      	ldr	r3, [pc, #248]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	2101      	movs	r1, #1
 80022a8:	430a      	orrs	r2, r1
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022ac:	f7fe fd34 	bl	8000d18 <HAL_GetTick>
 80022b0:	0003      	movs	r3, r0
 80022b2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022b6:	f7fe fd2f 	bl	8000d18 <HAL_GetTick>
 80022ba:	0002      	movs	r2, r0
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e1e0      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022c8:	4b35      	ldr	r3, [pc, #212]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d0f1      	beq.n	80022b6 <HAL_RCC_OscConfig+0x242>
 80022d2:	e018      	b.n	8002306 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d4:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022d8:	4b31      	ldr	r3, [pc, #196]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022da:	2101      	movs	r1, #1
 80022dc:	438a      	bics	r2, r1
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fd1a 	bl	8000d18 <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ea:	f7fe fd15 	bl	8000d18 <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e1c6      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	4b28      	ldr	r3, [pc, #160]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002300:	2202      	movs	r2, #2
 8002302:	4013      	ands	r3, r2
 8002304:	d1f1      	bne.n	80022ea <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2204      	movs	r2, #4
 800230c:	4013      	ands	r3, r2
 800230e:	d100      	bne.n	8002312 <HAL_RCC_OscConfig+0x29e>
 8002310:	e0b4      	b.n	800247c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002312:	201f      	movs	r0, #31
 8002314:	183b      	adds	r3, r7, r0
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231a:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	055b      	lsls	r3, r3, #21
 8002322:	4013      	ands	r3, r2
 8002324:	d110      	bne.n	8002348 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002326:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002328:	69da      	ldr	r2, [r3, #28]
 800232a:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800232c:	2180      	movs	r1, #128	; 0x80
 800232e:	0549      	lsls	r1, r1, #21
 8002330:	430a      	orrs	r2, r1
 8002332:	61da      	str	r2, [r3, #28]
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002336:	69da      	ldr	r2, [r3, #28]
 8002338:	2380      	movs	r3, #128	; 0x80
 800233a:	055b      	lsls	r3, r3, #21
 800233c:	4013      	ands	r3, r2
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002342:	183b      	adds	r3, r7, r0
 8002344:	2201      	movs	r2, #1
 8002346:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <HAL_RCC_OscConfig+0x338>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	; 0x80
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	4013      	ands	r3, r2
 8002352:	d11a      	bne.n	800238a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_RCC_OscConfig+0x338>)
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4b14      	ldr	r3, [pc, #80]	; (80023ac <HAL_RCC_OscConfig+0x338>)
 800235a:	2180      	movs	r1, #128	; 0x80
 800235c:	0049      	lsls	r1, r1, #1
 800235e:	430a      	orrs	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002362:	f7fe fcd9 	bl	8000d18 <HAL_GetTick>
 8002366:	0003      	movs	r3, r0
 8002368:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800236c:	f7fe fcd4 	bl	8000d18 <HAL_GetTick>
 8002370:	0002      	movs	r2, r0
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b64      	cmp	r3, #100	; 0x64
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e185      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b0b      	ldr	r3, [pc, #44]	; (80023ac <HAL_RCC_OscConfig+0x338>)
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	2380      	movs	r3, #128	; 0x80
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4013      	ands	r3, r2
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d10e      	bne.n	80023b0 <HAL_RCC_OscConfig+0x33c>
 8002392:	4b03      	ldr	r3, [pc, #12]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002394:	6a1a      	ldr	r2, [r3, #32]
 8002396:	4b02      	ldr	r3, [pc, #8]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002398:	2101      	movs	r1, #1
 800239a:	430a      	orrs	r2, r1
 800239c:	621a      	str	r2, [r3, #32]
 800239e:	e035      	b.n	800240c <HAL_RCC_OscConfig+0x398>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	fffeffff 	.word	0xfffeffff
 80023a8:	fffbffff 	.word	0xfffbffff
 80023ac:	40007000 	.word	0x40007000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x35e>
 80023b8:	4bb6      	ldr	r3, [pc, #728]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	4bb5      	ldr	r3, [pc, #724]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023be:	2101      	movs	r1, #1
 80023c0:	438a      	bics	r2, r1
 80023c2:	621a      	str	r2, [r3, #32]
 80023c4:	4bb3      	ldr	r3, [pc, #716]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023c6:	6a1a      	ldr	r2, [r3, #32]
 80023c8:	4bb2      	ldr	r3, [pc, #712]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023ca:	2104      	movs	r1, #4
 80023cc:	438a      	bics	r2, r1
 80023ce:	621a      	str	r2, [r3, #32]
 80023d0:	e01c      	b.n	800240c <HAL_RCC_OscConfig+0x398>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x380>
 80023da:	4bae      	ldr	r3, [pc, #696]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023dc:	6a1a      	ldr	r2, [r3, #32]
 80023de:	4bad      	ldr	r3, [pc, #692]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023e0:	2104      	movs	r1, #4
 80023e2:	430a      	orrs	r2, r1
 80023e4:	621a      	str	r2, [r3, #32]
 80023e6:	4bab      	ldr	r3, [pc, #684]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023e8:	6a1a      	ldr	r2, [r3, #32]
 80023ea:	4baa      	ldr	r3, [pc, #680]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023ec:	2101      	movs	r1, #1
 80023ee:	430a      	orrs	r2, r1
 80023f0:	621a      	str	r2, [r3, #32]
 80023f2:	e00b      	b.n	800240c <HAL_RCC_OscConfig+0x398>
 80023f4:	4ba7      	ldr	r3, [pc, #668]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023f6:	6a1a      	ldr	r2, [r3, #32]
 80023f8:	4ba6      	ldr	r3, [pc, #664]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80023fa:	2101      	movs	r1, #1
 80023fc:	438a      	bics	r2, r1
 80023fe:	621a      	str	r2, [r3, #32]
 8002400:	4ba4      	ldr	r3, [pc, #656]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002402:	6a1a      	ldr	r2, [r3, #32]
 8002404:	4ba3      	ldr	r3, [pc, #652]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002406:	2104      	movs	r1, #4
 8002408:	438a      	bics	r2, r1
 800240a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d014      	beq.n	800243e <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7fe fc80 	bl	8000d18 <HAL_GetTick>
 8002418:	0003      	movs	r3, r0
 800241a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241c:	e009      	b.n	8002432 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800241e:	f7fe fc7b 	bl	8000d18 <HAL_GetTick>
 8002422:	0002      	movs	r2, r0
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	1ad3      	subs	r3, r2, r3
 8002428:	4a9b      	ldr	r2, [pc, #620]	; (8002698 <HAL_RCC_OscConfig+0x624>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e12b      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	4b98      	ldr	r3, [pc, #608]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	2202      	movs	r2, #2
 8002438:	4013      	ands	r3, r2
 800243a:	d0f0      	beq.n	800241e <HAL_RCC_OscConfig+0x3aa>
 800243c:	e013      	b.n	8002466 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7fe fc6b 	bl	8000d18 <HAL_GetTick>
 8002442:	0003      	movs	r3, r0
 8002444:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002446:	e009      	b.n	800245c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe fc66 	bl	8000d18 <HAL_GetTick>
 800244c:	0002      	movs	r2, r0
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	4a91      	ldr	r2, [pc, #580]	; (8002698 <HAL_RCC_OscConfig+0x624>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e116      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245c:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 800245e:	6a1b      	ldr	r3, [r3, #32]
 8002460:	2202      	movs	r2, #2
 8002462:	4013      	ands	r3, r2
 8002464:	d1f0      	bne.n	8002448 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002466:	231f      	movs	r3, #31
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d105      	bne.n	800247c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002470:	4b88      	ldr	r3, [pc, #544]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002472:	69da      	ldr	r2, [r3, #28]
 8002474:	4b87      	ldr	r3, [pc, #540]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002476:	4989      	ldr	r1, [pc, #548]	; (800269c <HAL_RCC_OscConfig+0x628>)
 8002478:	400a      	ands	r2, r1
 800247a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2210      	movs	r2, #16
 8002482:	4013      	ands	r3, r2
 8002484:	d063      	beq.n	800254e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d12a      	bne.n	80024e4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800248e:	4b81      	ldr	r3, [pc, #516]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002492:	4b80      	ldr	r3, [pc, #512]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002494:	2104      	movs	r1, #4
 8002496:	430a      	orrs	r2, r1
 8002498:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800249a:	4b7e      	ldr	r3, [pc, #504]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 800249c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800249e:	4b7d      	ldr	r3, [pc, #500]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	430a      	orrs	r2, r1
 80024a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a6:	f7fe fc37 	bl	8000d18 <HAL_GetTick>
 80024aa:	0003      	movs	r3, r0
 80024ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024ae:	e008      	b.n	80024c2 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80024b0:	f7fe fc32 	bl	8000d18 <HAL_GetTick>
 80024b4:	0002      	movs	r2, r0
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e0e3      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80024c2:	4b74      	ldr	r3, [pc, #464]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024c6:	2202      	movs	r2, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	d0f1      	beq.n	80024b0 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024cc:	4b71      	ldr	r3, [pc, #452]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d0:	22f8      	movs	r2, #248	; 0xf8
 80024d2:	4393      	bics	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	00da      	lsls	r2, r3, #3
 80024dc:	4b6d      	ldr	r3, [pc, #436]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024de:	430a      	orrs	r2, r1
 80024e0:	635a      	str	r2, [r3, #52]	; 0x34
 80024e2:	e034      	b.n	800254e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	3305      	adds	r3, #5
 80024ea:	d111      	bne.n	8002510 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80024ec:	4b69      	ldr	r3, [pc, #420]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f0:	4b68      	ldr	r3, [pc, #416]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024f2:	2104      	movs	r1, #4
 80024f4:	438a      	bics	r2, r1
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80024f8:	4b66      	ldr	r3, [pc, #408]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024fc:	22f8      	movs	r2, #248	; 0xf8
 80024fe:	4393      	bics	r3, r2
 8002500:	0019      	movs	r1, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	00da      	lsls	r2, r3, #3
 8002508:	4b62      	ldr	r3, [pc, #392]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 800250a:	430a      	orrs	r2, r1
 800250c:	635a      	str	r2, [r3, #52]	; 0x34
 800250e:	e01e      	b.n	800254e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002510:	4b60      	ldr	r3, [pc, #384]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002514:	4b5f      	ldr	r3, [pc, #380]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002516:	2104      	movs	r1, #4
 8002518:	430a      	orrs	r2, r1
 800251a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800251c:	4b5d      	ldr	r3, [pc, #372]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 800251e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002520:	4b5c      	ldr	r3, [pc, #368]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002522:	2101      	movs	r1, #1
 8002524:	438a      	bics	r2, r1
 8002526:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002528:	f7fe fbf6 	bl	8000d18 <HAL_GetTick>
 800252c:	0003      	movs	r3, r0
 800252e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002532:	f7fe fbf1 	bl	8000d18 <HAL_GetTick>
 8002536:	0002      	movs	r2, r0
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0a2      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002544:	4b53      	ldr	r3, [pc, #332]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d1f1      	bne.n	8002532 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d100      	bne.n	8002558 <HAL_RCC_OscConfig+0x4e4>
 8002556:	e097      	b.n	8002688 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002558:	4b4e      	ldr	r3, [pc, #312]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	220c      	movs	r2, #12
 800255e:	4013      	ands	r3, r2
 8002560:	2b08      	cmp	r3, #8
 8002562:	d100      	bne.n	8002566 <HAL_RCC_OscConfig+0x4f2>
 8002564:	e06b      	b.n	800263e <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d14c      	bne.n	8002608 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	4b48      	ldr	r3, [pc, #288]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002574:	494a      	ldr	r1, [pc, #296]	; (80026a0 <HAL_RCC_OscConfig+0x62c>)
 8002576:	400a      	ands	r2, r1
 8002578:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257a:	f7fe fbcd 	bl	8000d18 <HAL_GetTick>
 800257e:	0003      	movs	r3, r0
 8002580:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002584:	f7fe fbc8 	bl	8000d18 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e079      	b.n	800268a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	049b      	lsls	r3, r3, #18
 800259e:	4013      	ands	r3, r2
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a2:	4b3c      	ldr	r3, [pc, #240]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80025a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a6:	220f      	movs	r2, #15
 80025a8:	4393      	bics	r3, r2
 80025aa:	0019      	movs	r1, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80025b6:	4b37      	ldr	r3, [pc, #220]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a3a      	ldr	r2, [pc, #232]	; (80026a4 <HAL_RCC_OscConfig+0x630>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c8:	431a      	orrs	r2, r3
 80025ca:	4b32      	ldr	r3, [pc, #200]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80025cc:	430a      	orrs	r2, r1
 80025ce:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d0:	4b30      	ldr	r3, [pc, #192]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4b2f      	ldr	r3, [pc, #188]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80025d6:	2180      	movs	r1, #128	; 0x80
 80025d8:	0449      	lsls	r1, r1, #17
 80025da:	430a      	orrs	r2, r1
 80025dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025de:	f7fe fb9b 	bl	8000d18 <HAL_GetTick>
 80025e2:	0003      	movs	r3, r0
 80025e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe fb96 	bl	8000d18 <HAL_GetTick>
 80025ec:	0002      	movs	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e047      	b.n	800268a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025fa:	4b26      	ldr	r3, [pc, #152]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	2380      	movs	r3, #128	; 0x80
 8002600:	049b      	lsls	r3, r3, #18
 8002602:	4013      	ands	r3, r2
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x574>
 8002606:	e03f      	b.n	8002688 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	4b21      	ldr	r3, [pc, #132]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 800260e:	4924      	ldr	r1, [pc, #144]	; (80026a0 <HAL_RCC_OscConfig+0x62c>)
 8002610:	400a      	ands	r2, r1
 8002612:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002614:	f7fe fb80 	bl	8000d18 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800261e:	f7fe fb7b 	bl	8000d18 <HAL_GetTick>
 8002622:	0002      	movs	r2, r0
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e02c      	b.n	800268a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	2380      	movs	r3, #128	; 0x80
 8002636:	049b      	lsls	r3, r3, #18
 8002638:	4013      	ands	r3, r2
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x5aa>
 800263c:	e024      	b.n	8002688 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d101      	bne.n	800264a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e01f      	b.n	800268a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800264a:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002650:	4b10      	ldr	r3, [pc, #64]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	025b      	lsls	r3, r3, #9
 800265c:	401a      	ands	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	429a      	cmp	r2, r3
 8002664:	d10e      	bne.n	8002684 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	220f      	movs	r2, #15
 800266a:	401a      	ands	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002670:	429a      	cmp	r2, r3
 8002672:	d107      	bne.n	8002684 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	23f0      	movs	r3, #240	; 0xf0
 8002678:	039b      	lsls	r3, r3, #14
 800267a:	401a      	ands	r2, r3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	0018      	movs	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	b008      	add	sp, #32
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	00001388 	.word	0x00001388
 800269c:	efffffff 	.word	0xefffffff
 80026a0:	feffffff 	.word	0xfeffffff
 80026a4:	ffc2ffff 	.word	0xffc2ffff

080026a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0b3      	b.n	8002824 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b5b      	ldr	r3, [pc, #364]	; (800282c <HAL_RCC_ClockConfig+0x184>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2201      	movs	r2, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d911      	bls.n	80026ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b58      	ldr	r3, [pc, #352]	; (800282c <HAL_RCC_ClockConfig+0x184>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2201      	movs	r2, #1
 80026d0:	4393      	bics	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	4b55      	ldr	r3, [pc, #340]	; (800282c <HAL_RCC_ClockConfig+0x184>)
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026dc:	4b53      	ldr	r3, [pc, #332]	; (800282c <HAL_RCC_ClockConfig+0x184>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2201      	movs	r2, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	683a      	ldr	r2, [r7, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e09a      	b.n	8002824 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2202      	movs	r2, #2
 80026f4:	4013      	ands	r3, r2
 80026f6:	d015      	beq.n	8002724 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2204      	movs	r2, #4
 80026fe:	4013      	ands	r3, r2
 8002700:	d006      	beq.n	8002710 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002702:	4b4b      	ldr	r3, [pc, #300]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 8002708:	21e0      	movs	r1, #224	; 0xe0
 800270a:	00c9      	lsls	r1, r1, #3
 800270c:	430a      	orrs	r2, r1
 800270e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002710:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	22f0      	movs	r2, #240	; 0xf0
 8002716:	4393      	bics	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	4b44      	ldr	r3, [pc, #272]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 8002720:	430a      	orrs	r2, r1
 8002722:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	d040      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d107      	bne.n	8002746 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002736:	4b3e      	ldr	r3, [pc, #248]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	2380      	movs	r3, #128	; 0x80
 800273c:	029b      	lsls	r3, r3, #10
 800273e:	4013      	ands	r3, r2
 8002740:	d114      	bne.n	800276c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e06e      	b.n	8002824 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d107      	bne.n	800275e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	2380      	movs	r3, #128	; 0x80
 8002754:	049b      	lsls	r3, r3, #18
 8002756:	4013      	ands	r3, r2
 8002758:	d108      	bne.n	800276c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e062      	b.n	8002824 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b34      	ldr	r3, [pc, #208]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	4013      	ands	r3, r2
 8002766:	d101      	bne.n	800276c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e05b      	b.n	8002824 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800276c:	4b30      	ldr	r3, [pc, #192]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2203      	movs	r2, #3
 8002772:	4393      	bics	r3, r2
 8002774:	0019      	movs	r1, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	4b2d      	ldr	r3, [pc, #180]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 800277c:	430a      	orrs	r2, r1
 800277e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002780:	f7fe faca 	bl	8000d18 <HAL_GetTick>
 8002784:	0003      	movs	r3, r0
 8002786:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002788:	e009      	b.n	800279e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800278a:	f7fe fac5 	bl	8000d18 <HAL_GetTick>
 800278e:	0002      	movs	r2, r0
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	4a27      	ldr	r2, [pc, #156]	; (8002834 <HAL_RCC_ClockConfig+0x18c>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d901      	bls.n	800279e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e042      	b.n	8002824 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	220c      	movs	r2, #12
 80027a4:	401a      	ands	r2, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d1ec      	bne.n	800278a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027b0:	4b1e      	ldr	r3, [pc, #120]	; (800282c <HAL_RCC_ClockConfig+0x184>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	4013      	ands	r3, r2
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d211      	bcs.n	80027e2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b1b      	ldr	r3, [pc, #108]	; (800282c <HAL_RCC_ClockConfig+0x184>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	2201      	movs	r2, #1
 80027c4:	4393      	bics	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	4b18      	ldr	r3, [pc, #96]	; (800282c <HAL_RCC_ClockConfig+0x184>)
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_RCC_ClockConfig+0x184>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d001      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e020      	b.n	8002824 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	d009      	beq.n	8002800 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80027ec:	4b10      	ldr	r3, [pc, #64]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a11      	ldr	r2, [pc, #68]	; (8002838 <HAL_RCC_ClockConfig+0x190>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 80027fc:	430a      	orrs	r2, r1
 80027fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002800:	f000 f820 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8002804:	0001      	movs	r1, r0
 8002806:	4b0a      	ldr	r3, [pc, #40]	; (8002830 <HAL_RCC_ClockConfig+0x188>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	091b      	lsrs	r3, r3, #4
 800280c:	220f      	movs	r2, #15
 800280e:	4013      	ands	r3, r2
 8002810:	4a0a      	ldr	r2, [pc, #40]	; (800283c <HAL_RCC_ClockConfig+0x194>)
 8002812:	5cd3      	ldrb	r3, [r2, r3]
 8002814:	000a      	movs	r2, r1
 8002816:	40da      	lsrs	r2, r3
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <HAL_RCC_ClockConfig+0x198>)
 800281a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800281c:	2003      	movs	r0, #3
 800281e:	f7fe fa35 	bl	8000c8c <HAL_InitTick>
  
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40022000 	.word	0x40022000
 8002830:	40021000 	.word	0x40021000
 8002834:	00001388 	.word	0x00001388
 8002838:	fffff8ff 	.word	0xfffff8ff
 800283c:	08003d7c 	.word	0x08003d7c
 8002840:	20000000 	.word	0x20000000

08002844 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	2300      	movs	r3, #0
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	2300      	movs	r3, #0
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	220c      	movs	r2, #12
 8002868:	4013      	ands	r3, r2
 800286a:	2b04      	cmp	r3, #4
 800286c:	d002      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x30>
 800286e:	2b08      	cmp	r3, #8
 8002870:	d003      	beq.n	800287a <HAL_RCC_GetSysClockFreq+0x36>
 8002872:	e02c      	b.n	80028ce <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002876:	613b      	str	r3, [r7, #16]
      break;
 8002878:	e02c      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	0c9b      	lsrs	r3, r3, #18
 800287e:	220f      	movs	r2, #15
 8002880:	4013      	ands	r3, r2
 8002882:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002884:	5cd3      	ldrb	r3, [r2, r3]
 8002886:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002888:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800288a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800288c:	220f      	movs	r2, #15
 800288e:	4013      	ands	r3, r2
 8002890:	4a16      	ldr	r2, [pc, #88]	; (80028ec <HAL_RCC_GetSysClockFreq+0xa8>)
 8002892:	5cd3      	ldrb	r3, [r2, r3]
 8002894:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	025b      	lsls	r3, r3, #9
 800289c:	4013      	ands	r3, r2
 800289e:	d009      	beq.n	80028b4 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028a0:	68b9      	ldr	r1, [r7, #8]
 80028a2:	4810      	ldr	r0, [pc, #64]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028a4:	f7fd fc30 	bl	8000108 <__udivsi3>
 80028a8:	0003      	movs	r3, r0
 80028aa:	001a      	movs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4353      	muls	r3, r2
 80028b0:	617b      	str	r3, [r7, #20]
 80028b2:	e009      	b.n	80028c8 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	000a      	movs	r2, r1
 80028b8:	0152      	lsls	r2, r2, #5
 80028ba:	1a52      	subs	r2, r2, r1
 80028bc:	0193      	lsls	r3, r2, #6
 80028be:	1a9b      	subs	r3, r3, r2
 80028c0:	00db      	lsls	r3, r3, #3
 80028c2:	185b      	adds	r3, r3, r1
 80028c4:	021b      	lsls	r3, r3, #8
 80028c6:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	613b      	str	r3, [r7, #16]
      break;
 80028cc:	e002      	b.n	80028d4 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028d0:	613b      	str	r3, [r7, #16]
      break;
 80028d2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80028d4:	693b      	ldr	r3, [r7, #16]
}
 80028d6:	0018      	movs	r0, r3
 80028d8:	46bd      	mov	sp, r7
 80028da:	b006      	add	sp, #24
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	46c0      	nop			; (mov r8, r8)
 80028e0:	40021000 	.word	0x40021000
 80028e4:	007a1200 	.word	0x007a1200
 80028e8:	08003d94 	.word	0x08003d94
 80028ec:	08003da4 	.word	0x08003da4

080028f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028f4:	4b02      	ldr	r3, [pc, #8]	; (8002900 <HAL_RCC_GetHCLKFreq+0x10>)
 80028f6:	681b      	ldr	r3, [r3, #0]
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	20000000 	.word	0x20000000

08002904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002908:	f7ff fff2 	bl	80028f0 <HAL_RCC_GetHCLKFreq>
 800290c:	0001      	movs	r1, r0
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	2207      	movs	r2, #7
 8002916:	4013      	ands	r3, r2
 8002918:	4a04      	ldr	r2, [pc, #16]	; (800292c <HAL_RCC_GetPCLK1Freq+0x28>)
 800291a:	5cd3      	ldrb	r3, [r2, r3]
 800291c:	40d9      	lsrs	r1, r3
 800291e:	000b      	movs	r3, r1
}    
 8002920:	0018      	movs	r0, r3
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	46c0      	nop			; (mov r8, r8)
 8002928:	40021000 	.word	0x40021000
 800292c:	08003d8c 	.word	0x08003d8c

08002930 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002938:	2300      	movs	r3, #0
 800293a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	025b      	lsls	r3, r3, #9
 8002948:	4013      	ands	r3, r2
 800294a:	d100      	bne.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800294c:	e08e      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2017      	movs	r0, #23
 8002950:	183b      	adds	r3, r7, r0
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002956:	4b57      	ldr	r3, [pc, #348]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	2380      	movs	r3, #128	; 0x80
 800295c:	055b      	lsls	r3, r3, #21
 800295e:	4013      	ands	r3, r2
 8002960:	d110      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002962:	4b54      	ldr	r3, [pc, #336]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002964:	69da      	ldr	r2, [r3, #28]
 8002966:	4b53      	ldr	r3, [pc, #332]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	0549      	lsls	r1, r1, #21
 800296c:	430a      	orrs	r2, r1
 800296e:	61da      	str	r2, [r3, #28]
 8002970:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002972:	69da      	ldr	r2, [r3, #28]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	055b      	lsls	r3, r3, #21
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297e:	183b      	adds	r3, r7, r0
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002984:	4b4c      	ldr	r3, [pc, #304]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	2380      	movs	r3, #128	; 0x80
 800298a:	005b      	lsls	r3, r3, #1
 800298c:	4013      	ands	r3, r2
 800298e:	d11a      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002990:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b48      	ldr	r3, [pc, #288]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	0049      	lsls	r1, r1, #1
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299e:	f7fe f9bb 	bl	8000d18 <HAL_GetTick>
 80029a2:	0003      	movs	r3, r0
 80029a4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a6:	e008      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe f9b6 	bl	8000d18 <HAL_GetTick>
 80029ac:	0002      	movs	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b64      	cmp	r3, #100	; 0x64
 80029b4:	d901      	bls.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e077      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4013      	ands	r3, r2
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c6:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029c8:	6a1a      	ldr	r2, [r3, #32]
 80029ca:	23c0      	movs	r3, #192	; 0xc0
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	4013      	ands	r3, r2
 80029d0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d034      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	23c0      	movs	r3, #192	; 0xc0
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4013      	ands	r3, r2
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d02c      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e8:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4a33      	ldr	r2, [pc, #204]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80029ee:	4013      	ands	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029f2:	4b30      	ldr	r3, [pc, #192]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f4:	6a1a      	ldr	r2, [r3, #32]
 80029f6:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80029f8:	2180      	movs	r1, #128	; 0x80
 80029fa:	0249      	lsls	r1, r1, #9
 80029fc:	430a      	orrs	r2, r1
 80029fe:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a00:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	4b2b      	ldr	r3, [pc, #172]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a06:	492e      	ldr	r1, [pc, #184]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002a08:	400a      	ands	r2, r1
 8002a0a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2201      	movs	r2, #1
 8002a16:	4013      	ands	r3, r2
 8002a18:	d013      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe f97d 	bl	8000d18 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a22:	e009      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe f978 	bl	8000d18 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e038      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a38:	4b1e      	ldr	r3, [pc, #120]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	2202      	movs	r2, #2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a42:	4b1c      	ldr	r3, [pc, #112]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	4a1d      	ldr	r2, [pc, #116]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4b18      	ldr	r3, [pc, #96]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a56:	2317      	movs	r3, #23
 8002a58:	18fb      	adds	r3, r7, r3
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	4b14      	ldr	r3, [pc, #80]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a62:	69da      	ldr	r2, [r3, #28]
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a66:	4918      	ldr	r1, [pc, #96]	; (8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002a68:	400a      	ands	r2, r1
 8002a6a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2201      	movs	r2, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a76:	4b0f      	ldr	r3, [pc, #60]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	4393      	bics	r3, r2
 8002a7e:	0019      	movs	r1, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a86:	430a      	orrs	r2, r1
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	4013      	ands	r3, r2
 8002a92:	d009      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a94:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	2210      	movs	r2, #16
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	0019      	movs	r1, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68da      	ldr	r2, [r3, #12]
 8002aa2:	4b04      	ldr	r3, [pc, #16]	; (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b006      	add	sp, #24
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40007000 	.word	0x40007000
 8002abc:	fffffcff 	.word	0xfffffcff
 8002ac0:	fffeffff 	.word	0xfffeffff
 8002ac4:	00001388 	.word	0x00001388
 8002ac8:	efffffff 	.word	0xefffffff

08002acc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d101      	bne.n	8002ade <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e042      	b.n	8002b64 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	223d      	movs	r2, #61	; 0x3d
 8002ae2:	5c9b      	ldrb	r3, [r3, r2]
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d107      	bne.n	8002afa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	223c      	movs	r2, #60	; 0x3c
 8002aee:	2100      	movs	r1, #0
 8002af0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f7fd ff87 	bl	8000a08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	223d      	movs	r2, #61	; 0x3d
 8002afe:	2102      	movs	r1, #2
 8002b00:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	0019      	movs	r1, r3
 8002b0c:	0010      	movs	r0, r2
 8002b0e:	f000 fa1f 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2246      	movs	r2, #70	; 0x46
 8002b16:	2101      	movs	r1, #1
 8002b18:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	223e      	movs	r2, #62	; 0x3e
 8002b1e:	2101      	movs	r1, #1
 8002b20:	5499      	strb	r1, [r3, r2]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	223f      	movs	r2, #63	; 0x3f
 8002b26:	2101      	movs	r1, #1
 8002b28:	5499      	strb	r1, [r3, r2]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2240      	movs	r2, #64	; 0x40
 8002b2e:	2101      	movs	r1, #1
 8002b30:	5499      	strb	r1, [r3, r2]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2241      	movs	r2, #65	; 0x41
 8002b36:	2101      	movs	r1, #1
 8002b38:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2242      	movs	r2, #66	; 0x42
 8002b3e:	2101      	movs	r1, #1
 8002b40:	5499      	strb	r1, [r3, r2]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2243      	movs	r2, #67	; 0x43
 8002b46:	2101      	movs	r1, #1
 8002b48:	5499      	strb	r1, [r3, r2]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2244      	movs	r2, #68	; 0x44
 8002b4e:	2101      	movs	r1, #1
 8002b50:	5499      	strb	r1, [r3, r2]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2245      	movs	r2, #69	; 0x45
 8002b56:	2101      	movs	r1, #1
 8002b58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	223d      	movs	r2, #61	; 0x3d
 8002b5e:	2101      	movs	r1, #1
 8002b60:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b62:	2300      	movs	r3, #0
}
 8002b64:	0018      	movs	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	b002      	add	sp, #8
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b082      	sub	sp, #8
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e042      	b.n	8002c04 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	223d      	movs	r2, #61	; 0x3d
 8002b82:	5c9b      	ldrb	r3, [r3, r2]
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d107      	bne.n	8002b9a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	223c      	movs	r2, #60	; 0x3c
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	0018      	movs	r0, r3
 8002b96:	f000 f839 	bl	8002c0c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	223d      	movs	r2, #61	; 0x3d
 8002b9e:	2102      	movs	r1, #2
 8002ba0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3304      	adds	r3, #4
 8002baa:	0019      	movs	r1, r3
 8002bac:	0010      	movs	r0, r2
 8002bae:	f000 f9cf 	bl	8002f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2246      	movs	r2, #70	; 0x46
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	223e      	movs	r2, #62	; 0x3e
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	5499      	strb	r1, [r3, r2]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	223f      	movs	r2, #63	; 0x3f
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	5499      	strb	r1, [r3, r2]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2240      	movs	r2, #64	; 0x40
 8002bce:	2101      	movs	r1, #1
 8002bd0:	5499      	strb	r1, [r3, r2]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2241      	movs	r2, #65	; 0x41
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2242      	movs	r2, #66	; 0x42
 8002bde:	2101      	movs	r1, #1
 8002be0:	5499      	strb	r1, [r3, r2]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2243      	movs	r2, #67	; 0x43
 8002be6:	2101      	movs	r1, #1
 8002be8:	5499      	strb	r1, [r3, r2]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2244      	movs	r2, #68	; 0x44
 8002bee:	2101      	movs	r1, #1
 8002bf0:	5499      	strb	r1, [r3, r2]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2245      	movs	r2, #69	; 0x45
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223d      	movs	r2, #61	; 0x3d
 8002bfe:	2101      	movs	r1, #1
 8002c00:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c14:	46c0      	nop			; (mov r8, r8)
 8002c16:	46bd      	mov	sp, r7
 8002c18:	b002      	add	sp, #8
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c28:	2317      	movs	r3, #23
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	223c      	movs	r2, #60	; 0x3c
 8002c34:	5c9b      	ldrb	r3, [r3, r2]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_TIM_PWM_ConfigChannel+0x22>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e0ad      	b.n	8002d9a <HAL_TIM_PWM_ConfigChannel+0x17e>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	223c      	movs	r2, #60	; 0x3c
 8002c42:	2101      	movs	r1, #1
 8002c44:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0c      	cmp	r3, #12
 8002c4a:	d100      	bne.n	8002c4e <HAL_TIM_PWM_ConfigChannel+0x32>
 8002c4c:	e076      	b.n	8002d3c <HAL_TIM_PWM_ConfigChannel+0x120>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d900      	bls.n	8002c56 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002c54:	e095      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d04e      	beq.n	8002cfa <HAL_TIM_PWM_ConfigChannel+0xde>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d900      	bls.n	8002c64 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002c62:	e08e      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <HAL_TIM_PWM_ConfigChannel+0x56>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d021      	beq.n	8002cb4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002c70:	e087      	b.n	8002d82 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68ba      	ldr	r2, [r7, #8]
 8002c78:	0011      	movs	r1, r2
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	f000 f9d4 	bl	8003028 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2104      	movs	r1, #4
 8002c9c:	438a      	bics	r2, r1
 8002c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6999      	ldr	r1, [r3, #24]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	691a      	ldr	r2, [r3, #16]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	619a      	str	r2, [r3, #24]
      break;
 8002cb2:	e06b      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	68ba      	ldr	r2, [r7, #8]
 8002cba:	0011      	movs	r1, r2
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 fa31 	bl	8003124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	699a      	ldr	r2, [r3, #24]
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2180      	movs	r1, #128	; 0x80
 8002cce:	0109      	lsls	r1, r1, #4
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699a      	ldr	r2, [r3, #24]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4931      	ldr	r1, [pc, #196]	; (8002da4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6999      	ldr	r1, [r3, #24]
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	021a      	lsls	r2, r3, #8
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	619a      	str	r2, [r3, #24]
      break;
 8002cf8:	e048      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	0011      	movs	r1, r2
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 fa8c 	bl	8003220 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	69da      	ldr	r2, [r3, #28]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2108      	movs	r1, #8
 8002d14:	430a      	orrs	r2, r1
 8002d16:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	69da      	ldr	r2, [r3, #28]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2104      	movs	r1, #4
 8002d24:	438a      	bics	r2, r1
 8002d26:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69d9      	ldr	r1, [r3, #28]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	61da      	str	r2, [r3, #28]
      break;
 8002d3a:	e027      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	0011      	movs	r1, r2
 8002d44:	0018      	movs	r0, r3
 8002d46:	f000 faeb 	bl	8003320 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	69da      	ldr	r2, [r3, #28]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2180      	movs	r1, #128	; 0x80
 8002d56:	0109      	lsls	r1, r1, #4
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69da      	ldr	r2, [r3, #28]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	490f      	ldr	r1, [pc, #60]	; (8002da4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002d68:	400a      	ands	r2, r1
 8002d6a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69d9      	ldr	r1, [r3, #28]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	021a      	lsls	r2, r3, #8
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	61da      	str	r2, [r3, #28]
      break;
 8002d80:	e004      	b.n	8002d8c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002d82:	2317      	movs	r3, #23
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
      break;
 8002d8a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	223c      	movs	r2, #60	; 0x3c
 8002d90:	2100      	movs	r1, #0
 8002d92:	5499      	strb	r1, [r3, r2]

  return status;
 8002d94:	2317      	movs	r3, #23
 8002d96:	18fb      	adds	r3, r7, r3
 8002d98:	781b      	ldrb	r3, [r3, #0]
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b006      	add	sp, #24
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	fffffbff 	.word	0xfffffbff

08002da8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002db2:	230f      	movs	r3, #15
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	223c      	movs	r2, #60	; 0x3c
 8002dbe:	5c9b      	ldrb	r3, [r3, r2]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_TIM_ConfigClockSource+0x20>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e0bc      	b.n	8002f42 <HAL_TIM_ConfigClockSource+0x19a>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	223c      	movs	r2, #60	; 0x3c
 8002dcc:	2101      	movs	r1, #1
 8002dce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	223d      	movs	r2, #61	; 0x3d
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	2277      	movs	r2, #119	; 0x77
 8002de4:	4393      	bics	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4a58      	ldr	r2, [pc, #352]	; (8002f4c <HAL_TIM_ConfigClockSource+0x1a4>)
 8002dec:	4013      	ands	r3, r2
 8002dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	0192      	lsls	r2, r2, #6
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d040      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0xde>
 8002e04:	2280      	movs	r2, #128	; 0x80
 8002e06:	0192      	lsls	r2, r2, #6
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d900      	bls.n	8002e0e <HAL_TIM_ConfigClockSource+0x66>
 8002e0c:	e088      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
 8002e0e:	2280      	movs	r2, #128	; 0x80
 8002e10:	0152      	lsls	r2, r2, #5
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d100      	bne.n	8002e18 <HAL_TIM_ConfigClockSource+0x70>
 8002e16:	e088      	b.n	8002f2a <HAL_TIM_ConfigClockSource+0x182>
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	0152      	lsls	r2, r2, #5
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d900      	bls.n	8002e22 <HAL_TIM_ConfigClockSource+0x7a>
 8002e20:	e07e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
 8002e22:	2b70      	cmp	r3, #112	; 0x70
 8002e24:	d018      	beq.n	8002e58 <HAL_TIM_ConfigClockSource+0xb0>
 8002e26:	d900      	bls.n	8002e2a <HAL_TIM_ConfigClockSource+0x82>
 8002e28:	e07a      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
 8002e2a:	2b60      	cmp	r3, #96	; 0x60
 8002e2c:	d04f      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x126>
 8002e2e:	d900      	bls.n	8002e32 <HAL_TIM_ConfigClockSource+0x8a>
 8002e30:	e076      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
 8002e32:	2b50      	cmp	r3, #80	; 0x50
 8002e34:	d03b      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x106>
 8002e36:	d900      	bls.n	8002e3a <HAL_TIM_ConfigClockSource+0x92>
 8002e38:	e072      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
 8002e3a:	2b40      	cmp	r3, #64	; 0x40
 8002e3c:	d057      	beq.n	8002eee <HAL_TIM_ConfigClockSource+0x146>
 8002e3e:	d900      	bls.n	8002e42 <HAL_TIM_ConfigClockSource+0x9a>
 8002e40:	e06e      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
 8002e42:	2b30      	cmp	r3, #48	; 0x30
 8002e44:	d063      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x166>
 8002e46:	d86b      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
 8002e48:	2b20      	cmp	r3, #32
 8002e4a:	d060      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x166>
 8002e4c:	d868      	bhi.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d05d      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x166>
 8002e52:	2b10      	cmp	r3, #16
 8002e54:	d05b      	beq.n	8002f0e <HAL_TIM_ConfigClockSource+0x166>
 8002e56:	e063      	b.n	8002f20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	6899      	ldr	r1, [r3, #8]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685a      	ldr	r2, [r3, #4]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f000 fb38 	bl	80034dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2277      	movs	r2, #119	; 0x77
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
      break;
 8002e84:	e052      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6899      	ldr	r1, [r3, #8]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	f000 fb21 	bl	80034dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2180      	movs	r1, #128	; 0x80
 8002ea6:	01c9      	lsls	r1, r1, #7
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	609a      	str	r2, [r3, #8]
      break;
 8002eac:	e03e      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	001a      	movs	r2, r3
 8002ebc:	f000 fa94 	bl	80033e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2150      	movs	r1, #80	; 0x50
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f000 faee 	bl	80034a8 <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e02e      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6818      	ldr	r0, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	6859      	ldr	r1, [r3, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	001a      	movs	r2, r3
 8002edc:	f000 fab2 	bl	8003444 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2160      	movs	r1, #96	; 0x60
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 fade 	bl	80034a8 <TIM_ITRx_SetConfig>
      break;
 8002eec:	e01e      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6859      	ldr	r1, [r3, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	001a      	movs	r2, r3
 8002efc:	f000 fa74 	bl	80033e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2140      	movs	r1, #64	; 0x40
 8002f06:	0018      	movs	r0, r3
 8002f08:	f000 face 	bl	80034a8 <TIM_ITRx_SetConfig>
      break;
 8002f0c:	e00e      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	0019      	movs	r1, r3
 8002f18:	0010      	movs	r0, r2
 8002f1a:	f000 fac5 	bl	80034a8 <TIM_ITRx_SetConfig>
      break;
 8002f1e:	e005      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002f20:	230f      	movs	r3, #15
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
      break;
 8002f28:	e000      	b.n	8002f2c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002f2a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	223d      	movs	r2, #61	; 0x3d
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	223c      	movs	r2, #60	; 0x3c
 8002f38:	2100      	movs	r1, #0
 8002f3a:	5499      	strb	r1, [r3, r2]

  return status;
 8002f3c:	230f      	movs	r3, #15
 8002f3e:	18fb      	adds	r3, r7, r3
 8002f40:	781b      	ldrb	r3, [r3, #0]
}
 8002f42:	0018      	movs	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b004      	add	sp, #16
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	ffff00ff 	.word	0xffff00ff

08002f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a2b      	ldr	r2, [pc, #172]	; (8003010 <TIM_Base_SetConfig+0xc0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d003      	beq.n	8002f70 <TIM_Base_SetConfig+0x20>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a2a      	ldr	r2, [pc, #168]	; (8003014 <TIM_Base_SetConfig+0xc4>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d108      	bne.n	8002f82 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2270      	movs	r2, #112	; 0x70
 8002f74:	4393      	bics	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a22      	ldr	r2, [pc, #136]	; (8003010 <TIM_Base_SetConfig+0xc0>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d00f      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a21      	ldr	r2, [pc, #132]	; (8003014 <TIM_Base_SetConfig+0xc4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d00b      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a20      	ldr	r2, [pc, #128]	; (8003018 <TIM_Base_SetConfig+0xc8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d007      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a1f      	ldr	r2, [pc, #124]	; (800301c <TIM_Base_SetConfig+0xcc>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d003      	beq.n	8002faa <TIM_Base_SetConfig+0x5a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a1e      	ldr	r2, [pc, #120]	; (8003020 <TIM_Base_SetConfig+0xd0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d108      	bne.n	8002fbc <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a1d      	ldr	r2, [pc, #116]	; (8003024 <TIM_Base_SetConfig+0xd4>)
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2280      	movs	r2, #128	; 0x80
 8002fc0:	4393      	bics	r3, r2
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <TIM_Base_SetConfig+0xc0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d007      	beq.n	8002ffa <TIM_Base_SetConfig+0xaa>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a0b      	ldr	r2, [pc, #44]	; (800301c <TIM_Base_SetConfig+0xcc>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d003      	beq.n	8002ffa <TIM_Base_SetConfig+0xaa>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a0a      	ldr	r2, [pc, #40]	; (8003020 <TIM_Base_SetConfig+0xd0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d103      	bne.n	8003002 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	615a      	str	r2, [r3, #20]
}
 8003008:	46c0      	nop			; (mov r8, r8)
 800300a:	46bd      	mov	sp, r7
 800300c:	b004      	add	sp, #16
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40012c00 	.word	0x40012c00
 8003014:	40000400 	.word	0x40000400
 8003018:	40002000 	.word	0x40002000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800
 8003024:	fffffcff 	.word	0xfffffcff

08003028 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	2201      	movs	r2, #1
 8003038:	4393      	bics	r3, r2
 800303a:	001a      	movs	r2, r3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2270      	movs	r2, #112	; 0x70
 8003056:	4393      	bics	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2203      	movs	r2, #3
 800305e:	4393      	bics	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2202      	movs	r2, #2
 8003070:	4393      	bics	r3, r2
 8003072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	4313      	orrs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a23      	ldr	r2, [pc, #140]	; (8003110 <TIM_OC1_SetConfig+0xe8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d007      	beq.n	8003096 <TIM_OC1_SetConfig+0x6e>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a22      	ldr	r2, [pc, #136]	; (8003114 <TIM_OC1_SetConfig+0xec>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d003      	beq.n	8003096 <TIM_OC1_SetConfig+0x6e>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a21      	ldr	r2, [pc, #132]	; (8003118 <TIM_OC1_SetConfig+0xf0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10c      	bne.n	80030b0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2208      	movs	r2, #8
 800309a:	4393      	bics	r3, r2
 800309c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	697a      	ldr	r2, [r7, #20]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	2204      	movs	r2, #4
 80030ac:	4393      	bics	r3, r2
 80030ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4a17      	ldr	r2, [pc, #92]	; (8003110 <TIM_OC1_SetConfig+0xe8>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d007      	beq.n	80030c8 <TIM_OC1_SetConfig+0xa0>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a16      	ldr	r2, [pc, #88]	; (8003114 <TIM_OC1_SetConfig+0xec>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d003      	beq.n	80030c8 <TIM_OC1_SetConfig+0xa0>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a15      	ldr	r2, [pc, #84]	; (8003118 <TIM_OC1_SetConfig+0xf0>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d111      	bne.n	80030ec <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	4a14      	ldr	r2, [pc, #80]	; (800311c <TIM_OC1_SetConfig+0xf4>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4a13      	ldr	r2, [pc, #76]	; (8003120 <TIM_OC1_SetConfig+0xf8>)
 80030d4:	4013      	ands	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	621a      	str	r2, [r3, #32]
}
 8003106:	46c0      	nop			; (mov r8, r8)
 8003108:	46bd      	mov	sp, r7
 800310a:	b006      	add	sp, #24
 800310c:	bd80      	pop	{r7, pc}
 800310e:	46c0      	nop			; (mov r8, r8)
 8003110:	40012c00 	.word	0x40012c00
 8003114:	40014400 	.word	0x40014400
 8003118:	40014800 	.word	0x40014800
 800311c:	fffffeff 	.word	0xfffffeff
 8003120:	fffffdff 	.word	0xfffffdff

08003124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	2210      	movs	r2, #16
 8003134:	4393      	bics	r3, r2
 8003136:	001a      	movs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	4a2c      	ldr	r2, [pc, #176]	; (8003204 <TIM_OC2_SetConfig+0xe0>)
 8003152:	4013      	ands	r3, r2
 8003154:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4a2b      	ldr	r2, [pc, #172]	; (8003208 <TIM_OC2_SetConfig+0xe4>)
 800315a:	4013      	ands	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	021b      	lsls	r3, r3, #8
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2220      	movs	r2, #32
 800316e:	4393      	bics	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	011b      	lsls	r3, r3, #4
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	4313      	orrs	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a22      	ldr	r2, [pc, #136]	; (800320c <TIM_OC2_SetConfig+0xe8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10d      	bne.n	80031a2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2280      	movs	r2, #128	; 0x80
 800318a:	4393      	bics	r3, r2
 800318c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	2240      	movs	r2, #64	; 0x40
 800319e:	4393      	bics	r3, r2
 80031a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a19      	ldr	r2, [pc, #100]	; (800320c <TIM_OC2_SetConfig+0xe8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d007      	beq.n	80031ba <TIM_OC2_SetConfig+0x96>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a18      	ldr	r2, [pc, #96]	; (8003210 <TIM_OC2_SetConfig+0xec>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_OC2_SetConfig+0x96>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a17      	ldr	r2, [pc, #92]	; (8003214 <TIM_OC2_SetConfig+0xf0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d113      	bne.n	80031e2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	4a16      	ldr	r2, [pc, #88]	; (8003218 <TIM_OC2_SetConfig+0xf4>)
 80031be:	4013      	ands	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4a15      	ldr	r2, [pc, #84]	; (800321c <TIM_OC2_SetConfig+0xf8>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4313      	orrs	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	621a      	str	r2, [r3, #32]
}
 80031fc:	46c0      	nop			; (mov r8, r8)
 80031fe:	46bd      	mov	sp, r7
 8003200:	b006      	add	sp, #24
 8003202:	bd80      	pop	{r7, pc}
 8003204:	ffff8fff 	.word	0xffff8fff
 8003208:	fffffcff 	.word	0xfffffcff
 800320c:	40012c00 	.word	0x40012c00
 8003210:	40014400 	.word	0x40014400
 8003214:	40014800 	.word	0x40014800
 8003218:	fffffbff 	.word	0xfffffbff
 800321c:	fffff7ff 	.word	0xfffff7ff

08003220 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b086      	sub	sp, #24
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6a1b      	ldr	r3, [r3, #32]
 800322e:	4a33      	ldr	r2, [pc, #204]	; (80032fc <TIM_OC3_SetConfig+0xdc>)
 8003230:	401a      	ands	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2270      	movs	r2, #112	; 0x70
 800324c:	4393      	bics	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2203      	movs	r2, #3
 8003254:	4393      	bics	r3, r2
 8003256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68fa      	ldr	r2, [r7, #12]
 800325e:	4313      	orrs	r3, r2
 8003260:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	4a26      	ldr	r2, [pc, #152]	; (8003300 <TIM_OC3_SetConfig+0xe0>)
 8003266:	4013      	ands	r3, r2
 8003268:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	4313      	orrs	r3, r2
 8003274:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a22      	ldr	r2, [pc, #136]	; (8003304 <TIM_OC3_SetConfig+0xe4>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10d      	bne.n	800329a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4a21      	ldr	r2, [pc, #132]	; (8003308 <TIM_OC3_SetConfig+0xe8>)
 8003282:	4013      	ands	r3, r2
 8003284:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4313      	orrs	r3, r2
 8003290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	4a1d      	ldr	r2, [pc, #116]	; (800330c <TIM_OC3_SetConfig+0xec>)
 8003296:	4013      	ands	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a19      	ldr	r2, [pc, #100]	; (8003304 <TIM_OC3_SetConfig+0xe4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d007      	beq.n	80032b2 <TIM_OC3_SetConfig+0x92>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a1a      	ldr	r2, [pc, #104]	; (8003310 <TIM_OC3_SetConfig+0xf0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d003      	beq.n	80032b2 <TIM_OC3_SetConfig+0x92>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a19      	ldr	r2, [pc, #100]	; (8003314 <TIM_OC3_SetConfig+0xf4>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d113      	bne.n	80032da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	4a18      	ldr	r2, [pc, #96]	; (8003318 <TIM_OC3_SetConfig+0xf8>)
 80032b6:	4013      	ands	r3, r2
 80032b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4a17      	ldr	r2, [pc, #92]	; (800331c <TIM_OC3_SetConfig+0xfc>)
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	693a      	ldr	r2, [r7, #16]
 80032de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68fa      	ldr	r2, [r7, #12]
 80032e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	621a      	str	r2, [r3, #32]
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b006      	add	sp, #24
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	fffffeff 	.word	0xfffffeff
 8003300:	fffffdff 	.word	0xfffffdff
 8003304:	40012c00 	.word	0x40012c00
 8003308:	fffff7ff 	.word	0xfffff7ff
 800330c:	fffffbff 	.word	0xfffffbff
 8003310:	40014400 	.word	0x40014400
 8003314:	40014800 	.word	0x40014800
 8003318:	ffffefff 	.word	0xffffefff
 800331c:	ffffdfff 	.word	0xffffdfff

08003320 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	4a26      	ldr	r2, [pc, #152]	; (80033c8 <TIM_OC4_SetConfig+0xa8>)
 8003330:	401a      	ands	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	69db      	ldr	r3, [r3, #28]
 8003346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4a20      	ldr	r2, [pc, #128]	; (80033cc <TIM_OC4_SetConfig+0xac>)
 800334c:	4013      	ands	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <TIM_OC4_SetConfig+0xb0>)
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	4313      	orrs	r3, r2
 8003362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	4a1b      	ldr	r2, [pc, #108]	; (80033d4 <TIM_OC4_SetConfig+0xb4>)
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	031b      	lsls	r3, r3, #12
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <TIM_OC4_SetConfig+0xb8>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d007      	beq.n	8003390 <TIM_OC4_SetConfig+0x70>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a16      	ldr	r2, [pc, #88]	; (80033dc <TIM_OC4_SetConfig+0xbc>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d003      	beq.n	8003390 <TIM_OC4_SetConfig+0x70>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a15      	ldr	r2, [pc, #84]	; (80033e0 <TIM_OC4_SetConfig+0xc0>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d109      	bne.n	80033a4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	4a14      	ldr	r2, [pc, #80]	; (80033e4 <TIM_OC4_SetConfig+0xc4>)
 8003394:	4013      	ands	r3, r2
 8003396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b006      	add	sp, #24
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	46c0      	nop			; (mov r8, r8)
 80033c8:	ffffefff 	.word	0xffffefff
 80033cc:	ffff8fff 	.word	0xffff8fff
 80033d0:	fffffcff 	.word	0xfffffcff
 80033d4:	ffffdfff 	.word	0xffffdfff
 80033d8:	40012c00 	.word	0x40012c00
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800
 80033e4:	ffffbfff 	.word	0xffffbfff

080033e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b086      	sub	sp, #24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a1b      	ldr	r3, [r3, #32]
 80033fe:	2201      	movs	r2, #1
 8003400:	4393      	bics	r3, r2
 8003402:	001a      	movs	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	22f0      	movs	r2, #240	; 0xf0
 8003412:	4393      	bics	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4313      	orrs	r3, r2
 800341e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	220a      	movs	r2, #10
 8003424:	4393      	bics	r3, r2
 8003426:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	4313      	orrs	r3, r2
 800342e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	621a      	str	r2, [r3, #32]
}
 800343c:	46c0      	nop			; (mov r8, r8)
 800343e:	46bd      	mov	sp, r7
 8003440:	b006      	add	sp, #24
 8003442:	bd80      	pop	{r7, pc}

08003444 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	2210      	movs	r2, #16
 8003456:	4393      	bics	r3, r2
 8003458:	001a      	movs	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	4a0d      	ldr	r2, [pc, #52]	; (80034a4 <TIM_TI2_ConfigInputStage+0x60>)
 800346e:	4013      	ands	r3, r2
 8003470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	031b      	lsls	r3, r3, #12
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	22a0      	movs	r2, #160	; 0xa0
 8003480:	4393      	bics	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	011b      	lsls	r3, r3, #4
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	621a      	str	r2, [r3, #32]
}
 800349a:	46c0      	nop			; (mov r8, r8)
 800349c:	46bd      	mov	sp, r7
 800349e:	b006      	add	sp, #24
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	ffff0fff 	.word	0xffff0fff

080034a8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2270      	movs	r2, #112	; 0x70
 80034bc:	4393      	bics	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	2207      	movs	r2, #7
 80034c8:	4313      	orrs	r3, r2
 80034ca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	609a      	str	r2, [r3, #8]
}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	46bd      	mov	sp, r7
 80034d6:	b004      	add	sp, #16
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
 80034e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	4a09      	ldr	r2, [pc, #36]	; (8003518 <TIM_ETR_SetConfig+0x3c>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	431a      	orrs	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4313      	orrs	r3, r2
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	609a      	str	r2, [r3, #8]
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b006      	add	sp, #24
 8003516:	bd80      	pop	{r7, pc}
 8003518:	ffff00ff 	.word	0xffff00ff

0800351c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	223c      	movs	r2, #60	; 0x3c
 800352a:	5c9b      	ldrb	r3, [r3, r2]
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003530:	2302      	movs	r3, #2
 8003532:	e03c      	b.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	223c      	movs	r2, #60	; 0x3c
 8003538:	2101      	movs	r1, #1
 800353a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	223d      	movs	r2, #61	; 0x3d
 8003540:	2102      	movs	r1, #2
 8003542:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2270      	movs	r2, #112	; 0x70
 8003558:	4393      	bics	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68fa      	ldr	r2, [r7, #12]
 8003562:	4313      	orrs	r3, r2
 8003564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a11      	ldr	r2, [pc, #68]	; (80035b8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a0f      	ldr	r2, [pc, #60]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d10c      	bne.n	800359c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	2280      	movs	r2, #128	; 0x80
 8003586:	4393      	bics	r3, r2
 8003588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	68ba      	ldr	r2, [r7, #8]
 8003590:	4313      	orrs	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68ba      	ldr	r2, [r7, #8]
 800359a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	223d      	movs	r2, #61	; 0x3d
 80035a0:	2101      	movs	r1, #1
 80035a2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	223c      	movs	r2, #60	; 0x3c
 80035a8:	2100      	movs	r1, #0
 80035aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b004      	add	sp, #16
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	40012c00 	.word	0x40012c00
 80035bc:	40000400 	.word	0x40000400

080035c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e044      	b.n	800365c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d107      	bne.n	80035ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2278      	movs	r2, #120	; 0x78
 80035de:	2100      	movs	r1, #0
 80035e0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f7fd fac7 	bl	8000b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2224      	movs	r2, #36	; 0x24
 80035ee:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	438a      	bics	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0018      	movs	r0, r3
 8003604:	f000 f830 	bl	8003668 <UART_SetConfig>
 8003608:	0003      	movs	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d101      	bne.n	8003612 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e024      	b.n	800365c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	0018      	movs	r0, r3
 800361e:	f000 f94b 	bl	80038b8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	490d      	ldr	r1, [pc, #52]	; (8003664 <HAL_UART_Init+0xa4>)
 800362e:	400a      	ands	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2108      	movs	r1, #8
 800363e:	438a      	bics	r2, r1
 8003640:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2101      	movs	r1, #1
 800364e:	430a      	orrs	r2, r1
 8003650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	0018      	movs	r0, r3
 8003656:	f000 f9e3 	bl	8003a20 <UART_CheckIdleState>
 800365a:	0003      	movs	r3, r0
}
 800365c:	0018      	movs	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}
 8003664:	fffff7ff 	.word	0xfffff7ff

08003668 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003670:	231e      	movs	r3, #30
 8003672:	18fb      	adds	r3, r7, r3
 8003674:	2200      	movs	r2, #0
 8003676:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	4313      	orrs	r3, r2
 800368e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a83      	ldr	r2, [pc, #524]	; (80038a4 <UART_SetConfig+0x23c>)
 8003698:	4013      	ands	r3, r2
 800369a:	0019      	movs	r1, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	4a7e      	ldr	r2, [pc, #504]	; (80038a8 <UART_SetConfig+0x240>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	0019      	movs	r1, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699b      	ldr	r3, [r3, #24]
 80036c2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	4a75      	ldr	r2, [pc, #468]	; (80038ac <UART_SetConfig+0x244>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	0019      	movs	r1, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e4:	4b72      	ldr	r3, [pc, #456]	; (80038b0 <UART_SetConfig+0x248>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	2203      	movs	r2, #3
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b03      	cmp	r3, #3
 80036ee:	d00d      	beq.n	800370c <UART_SetConfig+0xa4>
 80036f0:	d81b      	bhi.n	800372a <UART_SetConfig+0xc2>
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d014      	beq.n	8003720 <UART_SetConfig+0xb8>
 80036f6:	d818      	bhi.n	800372a <UART_SetConfig+0xc2>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <UART_SetConfig+0x9a>
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d00a      	beq.n	8003716 <UART_SetConfig+0xae>
 8003700:	e013      	b.n	800372a <UART_SetConfig+0xc2>
 8003702:	231f      	movs	r3, #31
 8003704:	18fb      	adds	r3, r7, r3
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	e012      	b.n	8003732 <UART_SetConfig+0xca>
 800370c:	231f      	movs	r3, #31
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2202      	movs	r2, #2
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e00d      	b.n	8003732 <UART_SetConfig+0xca>
 8003716:	231f      	movs	r3, #31
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2204      	movs	r2, #4
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e008      	b.n	8003732 <UART_SetConfig+0xca>
 8003720:	231f      	movs	r3, #31
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2208      	movs	r2, #8
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e003      	b.n	8003732 <UART_SetConfig+0xca>
 800372a:	231f      	movs	r3, #31
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2210      	movs	r2, #16
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69da      	ldr	r2, [r3, #28]
 8003738:	2380      	movs	r3, #128	; 0x80
 800373a:	021b      	lsls	r3, r3, #8
 800373c:	429a      	cmp	r2, r3
 800373e:	d15c      	bne.n	80037fa <UART_SetConfig+0x192>
  {
    switch (clocksource)
 8003740:	231f      	movs	r3, #31
 8003742:	18fb      	adds	r3, r7, r3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b08      	cmp	r3, #8
 8003748:	d015      	beq.n	8003776 <UART_SetConfig+0x10e>
 800374a:	dc18      	bgt.n	800377e <UART_SetConfig+0x116>
 800374c:	2b04      	cmp	r3, #4
 800374e:	d00d      	beq.n	800376c <UART_SetConfig+0x104>
 8003750:	dc15      	bgt.n	800377e <UART_SetConfig+0x116>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <UART_SetConfig+0xf4>
 8003756:	2b02      	cmp	r3, #2
 8003758:	d005      	beq.n	8003766 <UART_SetConfig+0xfe>
 800375a:	e010      	b.n	800377e <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375c:	f7ff f8d2 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 8003760:	0003      	movs	r3, r0
 8003762:	61bb      	str	r3, [r7, #24]
        break;
 8003764:	e012      	b.n	800378c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003766:	4b53      	ldr	r3, [pc, #332]	; (80038b4 <UART_SetConfig+0x24c>)
 8003768:	61bb      	str	r3, [r7, #24]
        break;
 800376a:	e00f      	b.n	800378c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376c:	f7ff f86a 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8003770:	0003      	movs	r3, r0
 8003772:	61bb      	str	r3, [r7, #24]
        break;
 8003774:	e00a      	b.n	800378c <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	021b      	lsls	r3, r3, #8
 800377a:	61bb      	str	r3, [r7, #24]
        break;
 800377c:	e006      	b.n	800378c <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003782:	231e      	movs	r3, #30
 8003784:	18fb      	adds	r3, r7, r3
 8003786:	2201      	movs	r2, #1
 8003788:	701a      	strb	r2, [r3, #0]
        break;
 800378a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d100      	bne.n	8003794 <UART_SetConfig+0x12c>
 8003792:	e07a      	b.n	800388a <UART_SetConfig+0x222>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	005a      	lsls	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	085b      	lsrs	r3, r3, #1
 800379e:	18d2      	adds	r2, r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	0019      	movs	r1, r3
 80037a6:	0010      	movs	r0, r2
 80037a8:	f7fc fcae 	bl	8000108 <__udivsi3>
 80037ac:	0003      	movs	r3, r0
 80037ae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	2b0f      	cmp	r3, #15
 80037b4:	d91c      	bls.n	80037f0 <UART_SetConfig+0x188>
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	2380      	movs	r3, #128	; 0x80
 80037ba:	025b      	lsls	r3, r3, #9
 80037bc:	429a      	cmp	r2, r3
 80037be:	d217      	bcs.n	80037f0 <UART_SetConfig+0x188>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	200e      	movs	r0, #14
 80037c6:	183b      	adds	r3, r7, r0
 80037c8:	210f      	movs	r1, #15
 80037ca:	438a      	bics	r2, r1
 80037cc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	2207      	movs	r2, #7
 80037d6:	4013      	ands	r3, r2
 80037d8:	b299      	uxth	r1, r3
 80037da:	183b      	adds	r3, r7, r0
 80037dc:	183a      	adds	r2, r7, r0
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	183a      	adds	r2, r7, r0
 80037ea:	8812      	ldrh	r2, [r2, #0]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	e04c      	b.n	800388a <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 80037f0:	231e      	movs	r3, #30
 80037f2:	18fb      	adds	r3, r7, r3
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e047      	b.n	800388a <UART_SetConfig+0x222>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037fa:	231f      	movs	r3, #31
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d015      	beq.n	8003830 <UART_SetConfig+0x1c8>
 8003804:	dc18      	bgt.n	8003838 <UART_SetConfig+0x1d0>
 8003806:	2b04      	cmp	r3, #4
 8003808:	d00d      	beq.n	8003826 <UART_SetConfig+0x1be>
 800380a:	dc15      	bgt.n	8003838 <UART_SetConfig+0x1d0>
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <UART_SetConfig+0x1ae>
 8003810:	2b02      	cmp	r3, #2
 8003812:	d005      	beq.n	8003820 <UART_SetConfig+0x1b8>
 8003814:	e010      	b.n	8003838 <UART_SetConfig+0x1d0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003816:	f7ff f875 	bl	8002904 <HAL_RCC_GetPCLK1Freq>
 800381a:	0003      	movs	r3, r0
 800381c:	61bb      	str	r3, [r7, #24]
        break;
 800381e:	e012      	b.n	8003846 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003820:	4b24      	ldr	r3, [pc, #144]	; (80038b4 <UART_SetConfig+0x24c>)
 8003822:	61bb      	str	r3, [r7, #24]
        break;
 8003824:	e00f      	b.n	8003846 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003826:	f7ff f80d 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 800382a:	0003      	movs	r3, r0
 800382c:	61bb      	str	r3, [r7, #24]
        break;
 800382e:	e00a      	b.n	8003846 <UART_SetConfig+0x1de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003830:	2380      	movs	r3, #128	; 0x80
 8003832:	021b      	lsls	r3, r3, #8
 8003834:	61bb      	str	r3, [r7, #24]
        break;
 8003836:	e006      	b.n	8003846 <UART_SetConfig+0x1de>
      default:
        pclk = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800383c:	231e      	movs	r3, #30
 800383e:	18fb      	adds	r3, r7, r3
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
        break;
 8003844:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01e      	beq.n	800388a <UART_SetConfig+0x222>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	085a      	lsrs	r2, r3, #1
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	18d2      	adds	r2, r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	0019      	movs	r1, r3
 800385c:	0010      	movs	r0, r2
 800385e:	f7fc fc53 	bl	8000108 <__udivsi3>
 8003862:	0003      	movs	r3, r0
 8003864:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	2b0f      	cmp	r3, #15
 800386a:	d90a      	bls.n	8003882 <UART_SetConfig+0x21a>
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	025b      	lsls	r3, r3, #9
 8003872:	429a      	cmp	r2, r3
 8003874:	d205      	bcs.n	8003882 <UART_SetConfig+0x21a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	b29a      	uxth	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60da      	str	r2, [r3, #12]
 8003880:	e003      	b.n	800388a <UART_SetConfig+0x222>
      }
      else
      {
        ret = HAL_ERROR;
 8003882:	231e      	movs	r3, #30
 8003884:	18fb      	adds	r3, r7, r3
 8003886:	2201      	movs	r2, #1
 8003888:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003896:	231e      	movs	r3, #30
 8003898:	18fb      	adds	r3, r7, r3
 800389a:	781b      	ldrb	r3, [r3, #0]
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b008      	add	sp, #32
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	ffff69f3 	.word	0xffff69f3
 80038a8:	ffffcfff 	.word	0xffffcfff
 80038ac:	fffff4ff 	.word	0xfffff4ff
 80038b0:	40021000 	.word	0x40021000
 80038b4:	007a1200 	.word	0x007a1200

080038b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2201      	movs	r2, #1
 80038c6:	4013      	ands	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	4a4a      	ldr	r2, [pc, #296]	; (80039fc <UART_AdvFeatureConfig+0x144>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	2202      	movs	r2, #2
 80038e8:	4013      	ands	r3, r2
 80038ea:	d00b      	beq.n	8003904 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <UART_AdvFeatureConfig+0x148>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	0019      	movs	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003908:	2204      	movs	r2, #4
 800390a:	4013      	ands	r3, r2
 800390c:	d00b      	beq.n	8003926 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	4a3b      	ldr	r2, [pc, #236]	; (8003a04 <UART_AdvFeatureConfig+0x14c>)
 8003916:	4013      	ands	r3, r2
 8003918:	0019      	movs	r1, r3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	2208      	movs	r2, #8
 800392c:	4013      	ands	r3, r2
 800392e:	d00b      	beq.n	8003948 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4a34      	ldr	r2, [pc, #208]	; (8003a08 <UART_AdvFeatureConfig+0x150>)
 8003938:	4013      	ands	r3, r2
 800393a:	0019      	movs	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	2210      	movs	r2, #16
 800394e:	4013      	ands	r3, r2
 8003950:	d00b      	beq.n	800396a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	4a2c      	ldr	r2, [pc, #176]	; (8003a0c <UART_AdvFeatureConfig+0x154>)
 800395a:	4013      	ands	r3, r2
 800395c:	0019      	movs	r1, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	430a      	orrs	r2, r1
 8003968:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396e:	2220      	movs	r2, #32
 8003970:	4013      	ands	r3, r2
 8003972:	d00b      	beq.n	800398c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <UART_AdvFeatureConfig+0x158>)
 800397c:	4013      	ands	r3, r2
 800397e:	0019      	movs	r1, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	430a      	orrs	r2, r1
 800398a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	2240      	movs	r2, #64	; 0x40
 8003992:	4013      	ands	r3, r2
 8003994:	d01d      	beq.n	80039d2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <UART_AdvFeatureConfig+0x15c>)
 800399e:	4013      	ands	r3, r2
 80039a0:	0019      	movs	r1, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b2:	2380      	movs	r3, #128	; 0x80
 80039b4:	035b      	lsls	r3, r3, #13
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d10b      	bne.n	80039d2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a15      	ldr	r2, [pc, #84]	; (8003a18 <UART_AdvFeatureConfig+0x160>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2280      	movs	r2, #128	; 0x80
 80039d8:	4013      	ands	r3, r2
 80039da:	d00b      	beq.n	80039f4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a0e      	ldr	r2, [pc, #56]	; (8003a1c <UART_AdvFeatureConfig+0x164>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b002      	add	sp, #8
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	fffdffff 	.word	0xfffdffff
 8003a00:	fffeffff 	.word	0xfffeffff
 8003a04:	fffbffff 	.word	0xfffbffff
 8003a08:	ffff7fff 	.word	0xffff7fff
 8003a0c:	ffffefff 	.word	0xffffefff
 8003a10:	ffffdfff 	.word	0xffffdfff
 8003a14:	ffefffff 	.word	0xffefffff
 8003a18:	ff9fffff 	.word	0xff9fffff
 8003a1c:	fff7ffff 	.word	0xfff7ffff

08003a20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b092      	sub	sp, #72	; 0x48
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2284      	movs	r2, #132	; 0x84
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a30:	f7fd f972 	bl	8000d18 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2208      	movs	r2, #8
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d12c      	bne.n	8003aa0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a48:	2280      	movs	r2, #128	; 0x80
 8003a4a:	0391      	lsls	r1, r2, #14
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	4a46      	ldr	r2, [pc, #280]	; (8003b68 <UART_CheckIdleState+0x148>)
 8003a50:	9200      	str	r2, [sp, #0]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f000 f88c 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003a58:	1e03      	subs	r3, r0, #0
 8003a5a:	d021      	beq.n	8003aa0 <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a64:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a66:	2301      	movs	r3, #1
 8003a68:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6c:	f383 8810 	msr	PRIMASK, r3
}
 8003a70:	46c0      	nop			; (mov r8, r8)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2180      	movs	r1, #128	; 0x80
 8003a7e:	438a      	bics	r2, r1
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a88:	f383 8810 	msr	PRIMASK, r3
}
 8003a8c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2220      	movs	r2, #32
 8003a92:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2278      	movs	r2, #120	; 0x78
 8003a98:	2100      	movs	r1, #0
 8003a9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e05f      	b.n	8003b60 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b04      	cmp	r3, #4
 8003aac:	d146      	bne.n	8003b3c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ab0:	2280      	movs	r2, #128	; 0x80
 8003ab2:	03d1      	lsls	r1, r2, #15
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	4a2c      	ldr	r2, [pc, #176]	; (8003b68 <UART_CheckIdleState+0x148>)
 8003ab8:	9200      	str	r2, [sp, #0]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f000 f858 	bl	8003b70 <UART_WaitOnFlagUntilTimeout>
 8003ac0:	1e03      	subs	r3, r0, #0
 8003ac2:	d03b      	beq.n	8003b3c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ac8:	60fb      	str	r3, [r7, #12]
  return(result);
 8003aca:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ace:	2301      	movs	r3, #1
 8003ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f383 8810 	msr	PRIMASK, r3
}
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4921      	ldr	r1, [pc, #132]	; (8003b6c <UART_CheckIdleState+0x14c>)
 8003ae6:	400a      	ands	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f383 8810 	msr	PRIMASK, r3
}
 8003af4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af6:	f3ef 8310 	mrs	r3, PRIMASK
 8003afa:	61bb      	str	r3, [r7, #24]
  return(result);
 8003afc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003afe:	633b      	str	r3, [r7, #48]	; 0x30
 8003b00:	2301      	movs	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f383 8810 	msr	PRIMASK, r3
}
 8003b0a:	46c0      	nop			; (mov r8, r8)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2101      	movs	r1, #1
 8003b18:	438a      	bics	r2, r1
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	f383 8810 	msr	PRIMASK, r3
}
 8003b26:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2280      	movs	r2, #128	; 0x80
 8003b2c:	2120      	movs	r1, #32
 8003b2e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2278      	movs	r2, #120	; 0x78
 8003b34:	2100      	movs	r1, #0
 8003b36:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b38:	2303      	movs	r3, #3
 8003b3a:	e011      	b.n	8003b60 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2280      	movs	r2, #128	; 0x80
 8003b46:	2120      	movs	r1, #32
 8003b48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2278      	movs	r2, #120	; 0x78
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	0018      	movs	r0, r3
 8003b62:	46bd      	mov	sp, r7
 8003b64:	b010      	add	sp, #64	; 0x40
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	01ffffff 	.word	0x01ffffff
 8003b6c:	fffffedf 	.word	0xfffffedf

08003b70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	603b      	str	r3, [r7, #0]
 8003b7c:	1dfb      	adds	r3, r7, #7
 8003b7e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b80:	e04b      	b.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	3301      	adds	r3, #1
 8003b86:	d048      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b88:	f7fd f8c6 	bl	8000d18 <HAL_GetTick>
 8003b8c:	0002      	movs	r2, r0
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	69ba      	ldr	r2, [r7, #24]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d302      	bcc.n	8003b9e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003b98:	69bb      	ldr	r3, [r7, #24]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e04b      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2204      	movs	r2, #4
 8003baa:	4013      	ands	r3, r2
 8003bac:	d035      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	2b08      	cmp	r3, #8
 8003bba:	d111      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f000 f83c 	bl	8003c44 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2284      	movs	r2, #132	; 0x84
 8003bd0:	2108      	movs	r1, #8
 8003bd2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2278      	movs	r2, #120	; 0x78
 8003bd8:	2100      	movs	r1, #0
 8003bda:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e02c      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69da      	ldr	r2, [r3, #28]
 8003be6:	2380      	movs	r3, #128	; 0x80
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	401a      	ands	r2, r3
 8003bec:	2380      	movs	r3, #128	; 0x80
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d112      	bne.n	8003c1a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	0018      	movs	r0, r3
 8003c02:	f000 f81f 	bl	8003c44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2284      	movs	r2, #132	; 0x84
 8003c0a:	2120      	movs	r1, #32
 8003c0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2278      	movs	r2, #120	; 0x78
 8003c12:	2100      	movs	r1, #0
 8003c14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e00f      	b.n	8003c3a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	68ba      	ldr	r2, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	425a      	negs	r2, r3
 8003c2a:	4153      	adcs	r3, r2
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	001a      	movs	r2, r3
 8003c30:	1dfb      	adds	r3, r7, #7
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0a4      	beq.n	8003b82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	b004      	add	sp, #16
 8003c40:	bd80      	pop	{r7, pc}
	...

08003c44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08e      	sub	sp, #56	; 0x38
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c50:	617b      	str	r3, [r7, #20]
  return(result);
 8003c52:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
 8003c56:	2301      	movs	r3, #1
 8003c58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	f383 8810 	msr	PRIMASK, r3
}
 8003c60:	46c0      	nop			; (mov r8, r8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4926      	ldr	r1, [pc, #152]	; (8003d08 <UART_EndRxTransfer+0xc4>)
 8003c6e:	400a      	ands	r2, r1
 8003c70:	601a      	str	r2, [r3, #0]
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	f383 8810 	msr	PRIMASK, r3
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c82:	623b      	str	r3, [r7, #32]
  return(result);
 8003c84:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
 8003c88:	2301      	movs	r3, #1
 8003c8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8e:	f383 8810 	msr	PRIMASK, r3
}
 8003c92:	46c0      	nop			; (mov r8, r8)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	438a      	bics	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	f383 8810 	msr	PRIMASK, r3
}
 8003cae:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d118      	bne.n	8003cea <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cbc:	60bb      	str	r3, [r7, #8]
  return(result);
 8003cbe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2110      	movs	r1, #16
 8003cda:	438a      	bics	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f383 8810 	msr	PRIMASK, r3
}
 8003ce8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2280      	movs	r2, #128	; 0x80
 8003cee:	2120      	movs	r1, #32
 8003cf0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	46bd      	mov	sp, r7
 8003d02:	b00e      	add	sp, #56	; 0x38
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	fffffedf 	.word	0xfffffedf

08003d0c <__libc_init_array>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	2600      	movs	r6, #0
 8003d10:	4d0c      	ldr	r5, [pc, #48]	; (8003d44 <__libc_init_array+0x38>)
 8003d12:	4c0d      	ldr	r4, [pc, #52]	; (8003d48 <__libc_init_array+0x3c>)
 8003d14:	1b64      	subs	r4, r4, r5
 8003d16:	10a4      	asrs	r4, r4, #2
 8003d18:	42a6      	cmp	r6, r4
 8003d1a:	d109      	bne.n	8003d30 <__libc_init_array+0x24>
 8003d1c:	2600      	movs	r6, #0
 8003d1e:	f000 f821 	bl	8003d64 <_init>
 8003d22:	4d0a      	ldr	r5, [pc, #40]	; (8003d4c <__libc_init_array+0x40>)
 8003d24:	4c0a      	ldr	r4, [pc, #40]	; (8003d50 <__libc_init_array+0x44>)
 8003d26:	1b64      	subs	r4, r4, r5
 8003d28:	10a4      	asrs	r4, r4, #2
 8003d2a:	42a6      	cmp	r6, r4
 8003d2c:	d105      	bne.n	8003d3a <__libc_init_array+0x2e>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	00b3      	lsls	r3, r6, #2
 8003d32:	58eb      	ldr	r3, [r5, r3]
 8003d34:	4798      	blx	r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7ee      	b.n	8003d18 <__libc_init_array+0xc>
 8003d3a:	00b3      	lsls	r3, r6, #2
 8003d3c:	58eb      	ldr	r3, [r5, r3]
 8003d3e:	4798      	blx	r3
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7f2      	b.n	8003d2a <__libc_init_array+0x1e>
 8003d44:	08003db4 	.word	0x08003db4
 8003d48:	08003db4 	.word	0x08003db4
 8003d4c:	08003db4 	.word	0x08003db4
 8003d50:	08003db8 	.word	0x08003db8

08003d54 <memset>:
 8003d54:	0003      	movs	r3, r0
 8003d56:	1882      	adds	r2, r0, r2
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d100      	bne.n	8003d5e <memset+0xa>
 8003d5c:	4770      	bx	lr
 8003d5e:	7019      	strb	r1, [r3, #0]
 8003d60:	3301      	adds	r3, #1
 8003d62:	e7f9      	b.n	8003d58 <memset+0x4>

08003d64 <_init>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr

08003d70 <_fini>:
 8003d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d72:	46c0      	nop			; (mov r8, r8)
 8003d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d76:	bc08      	pop	{r3}
 8003d78:	469e      	mov	lr, r3
 8003d7a:	4770      	bx	lr
